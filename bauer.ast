Der generierte Abstrakte Syntaxbaum ist fehlerhaft
(ImportStmt
   (TypeDefDecl[Zeiger: Public(true)] = Zahl)

   (FuncDecl[C_Null: [], Zeiger]
      (BlockStmt
         (ReturnStmt
            (CastExpr[Zeiger]
               (IntLit(0))
            )
         )
      )
   )

   (FuncDecl[C_Memcpy: [{{ein Name dest 0 Range{Start: Pos{L: 15 C: 54} End: Pos{L: 15 C: 58}} <nil>} Zeiger Range{Start: Pos{L: 15 C: 74} End: Pos{L: 15 C: 84}} <nil>} {{ein Name src 0 Range{Start: Pos{L: 15 C: 60} End: Pos{L: 15 C: 63}} <nil>} Zeiger Range{Start: Pos{L: 15 C: 86} End: Pos{L: 15 C: 92}} <nil>} {{ein Name n 0 Range{Start: Pos{L: 15 C: 68} End: Pos{L: 15 C: 69}} <nil>} Zahl Range{Start: Pos{L: 15 C: 97} End: Pos{L: 15 C: 101}} <nil>}], nichts] [Extern] [
Kopiert n Bytes vom Buffer src nach dest (entspricht memcpy() aus der C-stdlib) 
])

   (TypeDefDecl[CString: Public(true)] = Zeiger)

   (FuncDecl[Text_Zu_CString: [{{ein Name t 0 Range{Start: Pos{L: 25 C: 60} End: Pos{L: 25 C: 61}} <nil>} Text Referenz Range{Start: Pos{L: 25 C: 66} End: Pos{L: 25 C: 83}} <nil>}], CString] [Extern] [
Gibt den unterliegenden CString von t zurück. Der CString ist nur valide solange t auch valide ist. 
])

   (FuncDecl[Text_Zu_Zeiger: [{{ein Name t 0 Range{Start: Pos{L: 29 C: 59} End: Pos{L: 29 C: 60}} <nil>} Text Referenz Range{Start: Pos{L: 29 C: 65} End: Pos{L: 29 C: 82}} <nil>}], Zeiger] [Extern])

   (FuncDecl[Text_Byte_Groesse: [{{ein Name t 0 Range{Start: Pos{L: 34 C: 62} End: Pos{L: 34 C: 63}} <nil>} Text Referenz Range{Start: Pos{L: 34 C: 68} End: Pos{L: 34 C: 85}} <nil>}], Zahl] [Extern])

   (FuncDecl[Buchstabe_Byte_Groesse: [{{ein Name b 0 Range{Start: Pos{L: 39 C: 67} End: Pos{L: 39 C: 68}} <nil>} Buchstabe Range{Start: Pos{L: 39 C: 73} End: Pos{L: 39 C: 86}} <nil>}], Zahl] [Extern])

   (FuncDecl[Erstelle_Byte_Puffer: [{{ein Name n 0 Range{Start: Pos{L: 45 C: 65} End: Pos{L: 45 C: 66}} <nil>} Zahl Range{Start: Pos{L: 45 C: 71} End: Pos{L: 45 C: 79}} <nil>}], Text] [Extern] [
Gibt einen null-terminierten Byte Puffer zurück. 
])
)
(ImportStmt
   (FuncDecl[Programm_Beenden: [{{ein Name Code 0 Range{Start: Pos{L: 4 C: 61} End: Pos{L: 4 C: 65}} <nil>} Zahl Range{Start: Pos{L: 4 C: 70} End: Pos{L: 4 C: 78}} <nil>}], nichts] [Extern] [
	Beendet das Programm mit dem gegebenen Code. 
])

   (FuncDecl[Programm_Beenden_Standard: [], nichts] [
	Beendet das Programm mit Code 0. 
]
      (BlockStmt
         (ExprStmt
            (FuncCall[Programm_Beenden]
               (IntLit(0))
            )
         )
      )
   )

   (FuncDecl[Laufzeitfehler: [{{ein Name Nachricht 0 Range{Start: Pos{L: 22 C: 60} End: Pos{L: 22 C: 69}} <nil>} Text Range{Start: Pos{L: 22 C: 83} End: Pos{L: 22 C: 91}} <nil>} {{ein Name Code 0 Range{Start: Pos{L: 22 C: 74} End: Pos{L: 22 C: 78}} <nil>} Zahl Range{Start: Pos{L: 22 C: 96} End: Pos{L: 22 C: 100}} <nil>}], nichts] [Extern] [
	Wirft einen Laufzeitfehler mit einer Nachricht und einem Code. 
])

   (FuncDecl[Befehlszeilenargumente: [], Text Liste] [Extern] [
	Gibt eine Text Liste zurück die alle übergebenen Befehlszeilenargumente enthält.
	Index 1 enthält immer den Programmpfad. 
])

   (FuncDecl[Betriebssystem: [], Text] [Extern] [
	Gibt je nach Betriebssystem entweder "Windows" oder "Linux" zurück. 
])

   (FuncDecl[Ist_Befehlszeile: [], Wahrheitswert] [Extern] [
	Entspricht C's `isatty` funktion. 
])

   (FuncDecl[Macht_Nichts: [], nichts] [
	Leere Funktion, die nichts macht und nichts zurückgibt.
	Nützlich in einigen wenigen Fällen. 
]
      (BlockStmt)
   )

   (FuncDecl[Arbeitsverzeichnis: [], Text] [Extern] [
	Gibt den aktuellen Arbeitsverzeichnis zurück. 
])
)
(DeclStmt
   (StructDecl[TextBauer: Public(true)]
      (VarDecl[puffer: Text]
         (FuncCall[Erstelle_Byte_Puffer]
            (IntLit(128))
         )
      )

      (VarDecl[länge: Zahl]
         (IntLit(0))
      )
   )
)
(DeclStmt
   (FuncDecl[Erhoehe_Kapazitaet: [{{ein Name bauer 0 Range{Start: Pos{L: 11 C: 52} End: Pos{L: 11 C: 57}} <nil>} TextBauer Referenz Range{Start: Pos{L: 11 C: 76} End: Pos{L: 11 C: 98}} <nil>} {{ein Name neue_kapa 0 Range{Start: Pos{L: 11 C: 62} End: Pos{L: 11 C: 71}} <nil>} Zahl Range{Start: Pos{L: 11 C: 103} End: Pos{L: 11 C: 107}} <nil>}], nichts] [Extern])
)
(DeclStmt
   (FuncDecl[TextBauer_Buchstabe_Anfuegen_C: [{{ein Name bauer 0 Range{Start: Pos{L: 16 C: 64} End: Pos{L: 16 C: 69}} <nil>} TextBauer Referenz Range{Start: Pos{L: 16 C: 80} End: Pos{L: 16 C: 102}} <nil>} {{ein Name b 0 Range{Start: Pos{L: 16 C: 74} End: Pos{L: 16 C: 75}} <nil>} Buchstabe Range{Start: Pos{L: 16 C: 107} End: Pos{L: 16 C: 116}} <nil>}], nichts] [Extern])
)
(DeclStmt
   (FuncDecl[Kapazität_Berechnen: [{{ein Name bauer 0 Range{Start: Pos{L: 21 C: 53} End: Pos{L: 21 C: 58}} <nil>} TextBauer Referenz Range{Start: Pos{L: 21 C: 69} End: Pos{L: 21 C: 91}} <nil>} {{ein Name n 0 Range{Start: Pos{L: 21 C: 63} End: Pos{L: 21 C: 64}} <nil>} Zahl Range{Start: Pos{L: 21 C: 96} End: Pos{L: 21 C: 100}} <nil>}], Zahl]
      (BlockStmt
         (DeclStmt
            (VarDecl[kapa: Zahl]
               (FuncCall[Text_Byte_Groesse]
                  (FieldAccess
                     (Ident[puffer])

                     (Ident[bauer])
                  )
               )
            )
         )

         (IfStmt
            (BinaryExpr[kleiner als]
               (Ident[n])

               (BinaryExpr[mal]
                  (Ident[kapa])

                  (FloatLit(1.750000))
               )
            )

            (BlockStmt
               (ReturnStmt
                  (CastExpr[Zahl]
                     (Grouping
                        (BinaryExpr[mal]
                           (Ident[kapa])

                           (FloatLit(1.750000))
                        )
                     )
                  )
               )
            )
         )

         (ReturnStmt
            (Ident[n])
         )
      )
   )
)
(DeclStmt
   (FuncDecl[Bauer_Ende_Zeiger: [{{ein Name bauer 0 Range{Start: Pos{L: 29 C: 50} End: Pos{L: 29 C: 55}} <nil>} TextBauer Referenz Range{Start: Pos{L: 29 C: 60} End: Pos{L: 29 C: 82}} <nil>}], Zeiger]
      (BlockStmt
         (ReturnStmt
            (CastExpr[Zeiger]
               (Grouping
                  (BinaryExpr[plus]
                     (CastExpr[Zahl]
                        (CastExpr[Zeiger]
                           (CastExpr[CString]
                              (Grouping
                                 (BinaryExpr[von]
                                    (Ident[puffer])

                                    (Ident[bauer])
                                 )
                              )
                           )
                        )
                     )

                     (Grouping
                        (BinaryExpr[von]
                           (Ident[länge])

                           (Ident[bauer])
                        )
                     )
                  )
               )
            )
         )
      )
   )
)
(DeclStmt
   (FuncDecl[TextBauer_Text_Referenz_Anfügen: [{{ein Name bauer 0 Range{Start: Pos{L: 34 C: 77} End: Pos{L: 34 C: 82}} <nil>} TextBauer Referenz Range{Start: Pos{L: 34 C: 96} End: Pos{L: 34 C: 118}} <nil>} {{ein Name text 0 Range{Start: Pos{L: 34 C: 87} End: Pos{L: 34 C: 91}} <nil>} Text Referenz Range{Start: Pos{L: 34 C: 123} End: Pos{L: 34 C: 136}} <nil>}], nichts]
      (BlockStmt
         (DeclStmt
            (VarDecl[kapa_bauer: Zahl]
               (FuncCall[Text_Byte_Groesse]
                  (FieldAccess
                     (Ident[puffer])

                     (Ident[bauer])
                  )
               )
            )
         )

         (DeclStmt
            (VarDecl[kapa_text: Zahl]
               (FuncCall[Text_Byte_Groesse]
                  (Ident[text])
               )
            )
         )

         (IfStmt
            (BinaryExpr[kleiner als]
               (BinaryExpr[minus]
                  (Ident[kapa_bauer])

                  (Grouping
                     (BinaryExpr[von]
                        (Ident[länge])

                        (Ident[bauer])
                     )
                  )
               )

               (Ident[kapa_text])
            )

            (BlockStmt
               (ExprStmt
                  (FuncCall[Erhoehe_Kapazitaet]
                     (Ident[bauer])

                     (Grouping
                        (FuncCall[Kapazität_Berechnen]
                           (Grouping
                              (BinaryExpr[plus]
                                 (Ident[kapa_bauer])

                                 (Ident[kapa_text])
                              )
                           )

                           (Ident[bauer])
                        )
                     )
                  )
               )
            )
         )

         (ExprStmt
            (FuncCall[C_Memcpy]
               (Ident[kapa_text])

               (Grouping
                  (CastExpr[Zeiger]
                     (CastExpr[CString]
                        (Ident[text])
                     )
                  )
               )

               (Grouping
                  (FuncCall[Bauer_Ende_Zeiger]
                     (Ident[bauer])
                  )
               )
            )
         )

         (AssignStmt
            (FieldAccess
               (Ident[länge])

               (Ident[bauer])
            )

            (BinaryExpr[plus]
               (FieldAccess
                  (Ident[länge])

                  (Ident[bauer])
               )

               (Ident[kapa_text])
            )
         )
      )
   )
)
(DeclStmt
   (FuncDecl[TextBauer_Buchstabe_Anfügen: [{{ein Name bauer 0 Range{Start: Pos{L: 46 C: 73} End: Pos{L: 46 C: 78}} <nil>} TextBauer Referenz Range{Start: Pos{L: 46 C: 89} End: Pos{L: 46 C: 111}} <nil>} {{ein Name b 0 Range{Start: Pos{L: 46 C: 83} End: Pos{L: 46 C: 84}} <nil>} Buchstabe Range{Start: Pos{L: 46 C: 116} End: Pos{L: 46 C: 125}} <nil>}], nichts]
      (BlockStmt
         (IfStmt
            (BinaryExpr[gleich]
               (CastExpr[Zahl]
                  (Ident[b])
               )

               (IntLit(0))
            )

            (BlockStmt
               (ReturnStmt[void])
            )
         )

         (DeclStmt
            (VarDecl[kapa_bauer: Zahl]
               (FuncCall[Text_Byte_Groesse]
                  (FieldAccess
                     (Ident[puffer])

                     (Ident[bauer])
                  )
               )
            )
         )

         (DeclStmt
            (VarDecl[kapa_text: Zahl]
               (FuncCall[Buchstabe_Byte_Groesse]
                  (Ident[b])
               )
            )
         )

         (IfStmt
            (BinaryExpr[kleiner als]
               (BinaryExpr[minus]
                  (Ident[kapa_bauer])

                  (Grouping
                     (BinaryExpr[von]
                        (Ident[länge])

                        (Ident[bauer])
                     )
                  )
               )

               (Ident[kapa_text])
            )

            (BlockStmt
               (ExprStmt
                  (FuncCall[Erhoehe_Kapazitaet]
                     (Ident[bauer])

                     (Grouping
                        (FuncCall[Kapazität_Berechnen]
                           (Grouping
                              (BinaryExpr[plus]
                                 (Ident[kapa_bauer])

                                 (Ident[kapa_text])
                              )
                           )

                           (Ident[bauer])
                        )
                     )
                  )
               )
            )
         )

         (ExprStmt
            (FuncCall[TextBauer_Buchstabe_Anfuegen_C]
               (Ident[b])

               (Ident[bauer])
            )
         )

         (AssignStmt
            (FieldAccess
               (Ident[länge])

               (Ident[bauer])
            )

            (BinaryExpr[plus]
               (FieldAccess
                  (Ident[länge])

                  (Ident[bauer])
               )

               (Ident[kapa_text])
            )
         )
      )
   )
)
(DeclStmt
   (FuncDecl[TextBauer_Text_Anfügen: [{{ein Name bauer 0 Range{Start: Pos{L: 60 C: 68} End: Pos{L: 60 C: 73}} <nil>} TextBauer Referenz Range{Start: Pos{L: 60 C: 87} End: Pos{L: 60 C: 109}} <nil>} {{ein Name text 0 Range{Start: Pos{L: 60 C: 78} End: Pos{L: 60 C: 82}} <nil>} Text Range{Start: Pos{L: 60 C: 114} End: Pos{L: 60 C: 118}} <nil>}], nichts]
      (BlockStmt
         (ExprStmt
            (FuncCall[TextBauer_Text_Referenz_Anfügen]
               (Ident[text])

               (Ident[bauer])
            )
         )
      )
   )
)
(DeclStmt
   (FuncDecl[TextBauer_Als_Text: [{{ein Name bauer 0 Range{Start: Pos{L: 66 C: 63} End: Pos{L: 66 C: 68}} <nil>} TextBauer Referenz Range{Start: Pos{L: 66 C: 73} End: Pos{L: 66 C: 95}} <nil>}], Text] [Extern])
)

