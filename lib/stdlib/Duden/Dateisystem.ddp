[ Wird für die Externen Funktionen benötigt ]
Binde "Duden/Fehlerbehandlung" ein.
Binde "Duden/Texte" ein.

[
	Die Funktion Schreibe_Text_Datei schreibt einen Text (text) in die Datei an dem gegebenen Text Pfad.
]
Die öffentliche Funktion Schreibe_Text_Datei mit den Parametern Pfad und text vom Typ Text und Text, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Schreibe den Text <text> in die Datei <Pfad>" oder
	"schreibe den Text <text> in die Datei <Pfad>" oder
	"die Anzahl der Bytes, die von <text> in <Pfad> geschrieben wurde"

[
	Die Funktion Lies_Text_Datei speichert den Inhalt der Datei, die an dem gegebenen Pfad liegt, in ref und gibt die Anzahl der Bytes der gelesenen Datei zurück.
]
Die öffentliche Funktion Lies_Text_Datei mit den Parametern Pfad und ref vom Typ Text und Text Referenz, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Lies den Text in <Pfad> und speichere ihn in <ref>" oder
	"die Anzahl der Bytes, die aus <Pfad> gelesen und in <ref> gespeichert wurden"

[
	Überprüft ob der gegebene Pfad existiert (egal ob als Ordner oder Datei)
]
Die öffentliche Funktion Existiert_Pfad mit dem Parameter Pfad vom Typ Text, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"die Datei <Pfad> existiert" oder
	"der Ordner <Pfad> existiert" oder
	"der Pfad <Pfad> existiert"

[
	Überprüft ob der gegebene Pfad ein Ordner ist
]
Die öffentliche Funktion Ist_Ordner mit dem Parameter Pfad vom Typ Text, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"<Pfad> ein Ordner ist"

[
	Überprüft ob der gegebene Pfad eine Datei ist
]
Die öffentliche Funktion Ist_Datei mit dem Parameter Pfad vom Typ Text, gibt einen Wahrheitswert zurück, macht:
	Wenn die Länge von Pfad gleich 0 ist oder Pfad ein Ordner ist, gib falsch zurück.
	Gib wahr zurück.
Und kann so benutzt werden:
	"<Pfad> eine Datei ist"

[
	Erstellt rekursiv den Ordner Pfad.
	Rekursiv -> alle benötigten zwischen Ordner werden ebenfalls erstellt.

	Gibt zurück ob das Erstellen erfolgreich war.
]
Die öffentliche Funktion Erstelle_Ordner mit dem Parameter Pfad vom Typ Text, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Erstelle den Ordner <Pfad>" oder
	"der Ordner <Pfad> erfolgreich erstellt wurde"

[
	!!!Nicht unbedingt sicher!!!

	Löscht die gegebene Datei oder den gegebenen Ordner.
	Im Falle eines Ordners wird rekursiv das gesamte Verzeichnis gelöscht.

	Gibt zurück ob das Löschen erfolgreich war.
]
Die öffentliche Funktion Loesche_Pfad mit dem Parameter Pfad vom Typ Text, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Lösche <Pfad>" oder
	"<Pfad> erfolgreich gelöscht wurde" oder
	"Lösche die Datei <Pfad>" oder
	"die Datei <Pfad> erfolgreich gelöscht wurde" oder
	"Lösche den Ordner <Pfad>" oder
	"der Ordner <Pfad> erfolgreich gelöscht wurde"

[
	!!!Nicht unbedings sicher!!!

	Verschiebt den Pfad zu NeuerName.
	Kann auch zum Umbenennen benutzt werden.

	Gibt zurück ob das Umbenennen erfolgreich war.
]
Die öffentliche Funktion Pfad_Verschieben mit den Parametern Pfad und NeuerName vom Typ Text und Text, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Verschiebe <Pfad> nach <NeuerName>" oder
	"<Pfad> erfolgreich nach <NeuerName> verschoben wurde"

[
	Equavilent zu C's stat.st_atime formatiert als Text
]
Die öffentliche Funktion Zugriff_Datum mit dem Parameter Pfad vom Typ Text, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"das Datum des letzten Zugriffs der Datei <Pfad>"

[
	Equavilent zu C's stat.st_mtime formatiert als Text
]
Die öffentliche Funktion AEnderung_Datum mit dem Parameter Pfad vom Typ Text, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"das Datum der letzten Änderung der Datei <Pfad>"

[
	Equavilent zu C's stat.st_ctime formatiert als Text
]
Die öffentliche Funktion Status_Datum mit dem Parameter Pfad vom Typ Text, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"das Datum der letzten Statusänderung der Datei <Pfad>"

[
	Equavilent zu C's stat.st_size
]
Die öffentliche Funktion Datei_Groesse mit dem Parameter Pfad vom Typ Text, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"die Größe der Datei <Pfad>" oder
	"die Größe der Datei <Pfad> in Byte"

[
	Equavilent zu C's stat.st_mode
]
Die öffentliche Funktion Datei_Modus mit dem Parameter Pfad vom Typ Text, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"den Modus der Datei <Pfad>"

[
	Kopiert die Datei am Pfad nach Kopiepfad. 
	!! Achtung: Kann existierende Dateien überschreiben !!
]
Die öffentliche Funktion Datei_Kopieren mit den Parametern Pfad und Kopiepfad vom Typ Text und Text, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"Kopiere die Datei <Pfad> nach <Kopiepfad>"

[

	Allgemeine Datei Eingabe/Ausgabe

]

[
	Bit-Flags für den Modus der Datei.
	!!! Dürfen nicht verändert werden !!! -> in Zukunft als Funktionen implementieren.

	!!! Müssen mit den C Flags übereinstimmen !!!
]

Die öffentliche Zahl MODUS_NUR_LESEN ist 1.
Die öffentliche Zahl MODUS_NUR_SCHREIBEN ist 2.
Die öffentliche Zahl MODUS_LESEN_SCHREIBEN ist 4.

Die öffentliche Zahl MODUS_ERSTELLEN ist 8.
Die öffentliche Zahl MODUS_ANHAENGEN ist 16.
Die öffentliche Zahl MODUS_TRUNKIEREN ist 32.

[
	Eine Kombination, die Daten über eine Datei enthält, von der gelesen oder in die geschrieben werden kann.
	Das Lesen und Schreiben ist gepuffert.
]
Wir nennen die öffentliche Kombination aus
	der Zahl index mit Standardwert -1,
	der Zahl id mit Standardwert -1,
eine Datei,
und erstellen sie so:
	"noch nicht offen" oder
	"eine geschlossene Datei"

[
	Öffnet Datei im Modus mit dem Pfad.
	Dabei ist Modus eine Sammlung von Bit-Flags, die die Art des Zugriffs auf die Datei bestimmen.
]
Die öffentliche Funktion Datei_Oeffnen mit den Parametern datei, Pfad und Modus vom Typ Datei Referenz, Text und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Öffne <datei> mit dem Pfad <Pfad> im Modus <Modus>" oder
	"Oeffne <datei> mit dem Pfad <Pfad> im Modus <Modus>" oder
	"öffne <datei> mit dem Pfad <Pfad> im Modus <Modus>" oder
	"oeffne <datei> mit dem Pfad <Pfad> im Modus <Modus>"

[
	Öffnet Datei mit Pfad zum Lesen, und erstellt sie, falls sie nicht existiert:
		Öffne Datei mit dem Pfad Pfad im Modus (MODUS_NUR_LESEN logisch oder MODUS_ERSTELLEN).
]
Die öffentliche Funktion Datei_Oeffnen_Lesen mit den Parametern datei und Pfad vom Typ Datei Referenz und Text, gibt nichts zurück, macht:
	Öffne datei mit dem Pfad Pfad im Modus (MODUS_NUR_LESEN logisch oder MODUS_ERSTELLEN).
Und kann so benutzt werden:
	"Öffne <datei> mit dem Pfad <Pfad> zum Lesen" oder
	"Oeffne <datei> mit dem Pfad <Pfad> zum Lesen" oder
	"öffne <datei> mit dem Pfad <Pfad> zum Lesen" oder
	"oeffne <datei> mit dem Pfad <Pfad> zum Lesen"

[
	Öffnet Datei mit Pfad zum Schreiben, und erstellt sie, falls sie nicht existiert:
		Öffne Datei mit dem Pfad Pfad im Modus (MODUS_NUR_SCHREIBEN logisch oder MODUS_ERSTELLEN).
]
Die öffentliche Funktion Datei_Oeffnen_Schreiben mit den Parametern datei und Pfad vom Typ Datei Referenz und Text, gibt nichts zurück, macht:
	Öffne datei mit dem Pfad Pfad im Modus (MODUS_NUR_SCHREIBEN logisch oder MODUS_ERSTELLEN).
Und kann so benutzt werden:
	"Öffne <datei> mit dem Pfad <Pfad> zum Schreiben" oder
	"Oeffne <datei> mit dem Pfad <Pfad> zum Schreiben" oder
	"öffne <datei> mit dem Pfad <Pfad> zum Schreiben" oder
	"oeffne <datei> mit dem Pfad <Pfad> zum Schreiben"

[
	Öffnet Datei mit Pfad zum Lesen und Schreiben, und erstellt sie, falls sie nicht existiert:
		Öffne Datei mit dem Pfad Pfad im Modus (MODUS_LESEN_SCHREIBEN logisch oder MODUS_ERSTELLEN).
]
Die öffentliche Funktion Datei_Oeffnen_Lesen_Schreiben mit den Parametern datei und Pfad vom Typ Datei Referenz und Text, gibt nichts zurück, macht:
	Öffne datei mit dem Pfad Pfad im Modus (MODUS_LESEN_SCHREIBEN logisch oder MODUS_ERSTELLEN).
Und kann so benutzt werden:
	"Öffne <datei> mit dem Pfad <Pfad> zum Lesen und Schreiben" oder
	"Oeffne <datei> mit dem Pfad <Pfad> zum Lesen und Schreiben" oder
	"öffne <datei> mit dem Pfad <Pfad> zum Lesen und Schreiben" oder
	"oeffne <datei> mit dem Pfad <Pfad> zum Lesen und Schreiben"

[
	Öffnet Pfad im gegebenen Modus und gibt die Datei zurück.
	Dabei ist Modus eine Sammlung von Bit-Flags, die die Art des Zugriffs auf die Datei bestimmen.
]
Die öffentliche Funktion Datei_Oeffnen_Rückgabe mit den Parametern Pfad und Modus vom Typ Text und Zahl, gibt eine Datei zurück, macht:
	Die Datei datei ist noch nicht offen.
	Öffne datei mit dem Pfad Pfad im Modus Modus.
	Gib datei zurück.
Und kann so benutzt werden:
	"<Pfad> im Modus <Modus> geöffnet" oder
	"<Pfad> im Modus <Modus> geoeffnet"

[
	Öffnet Pfad zum Lesen und gibt die Datei zurück.
]
Die öffentliche Funktion Datei_Oeffnen_Lesen_Rückgabe mit dem Parameter Pfad vom Typ Text, gibt eine Datei zurück, macht:
	Gib Pfad im Modus (MODUS_NUR_LESEN logisch oder MODUS_ERSTELLEN) geöffnet zurück.
Und kann so benutzt werden:
	"<Pfad> zum Lesen geöffnet" oder
	"<Pfad> zum Lesen geoeffnet"

[
	Öffnet Pfad zum Schreiben und gibt die Datei zurück.
]
Die öffentliche Funktion Datei_Oeffnen_Schreiben_Rückgabe mit dem Parameter Pfad vom Typ Text, gibt eine Datei zurück, macht:
	Gib Pfad im Modus (MODUS_NUR_SCHREIBEN logisch oder MODUS_ERSTELLEN) geöffnet zurück.
Und kann so benutzt werden:
	"<Pfad> zum Schreiben geöffnet" oder
	"<Pfad> zum Schreiben geoeffnet"

[
	Öffnet Pfad zum Lesen und Schreiben und gibt die Datei zurück.
]
Die öffentliche Funktion Datei_Oeffnen_Lesen_Schreiben_Rückgabe mit dem Parameter Pfad vom Typ Text, gibt eine Datei zurück, macht:
	Gib Pfad im Modus (MODUS_LESEN_SCHREIBEN logisch oder MODUS_ERSTELLEN) geöffnet zurück.
Und kann so benutzt werden:
	"<Pfad> zum Lesen und Schreiben geöffnet" oder
	"<Pfad> zum Lesen und Schreiben geoeffnet"

[
	Schließt die Datei und gibt alle damit assoziierten Ressourcen frei.
	Muss aufgerufen werden, wenn die Datei nicht mehr gebraucht wird.

	Nach dem Schließen kann die Datei Variable erneut geöffnet werden.
]
Die öffentliche Funktion Datei_Schliessen mit dem Parameter datei vom Typ Datei Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Schließe <datei>" oder
	"Schliesse <datei>" oder
	"schließe <datei>" oder
	"schliesse <datei>"

[
	Ob die Datei zuende gelesen wurde.
]
Die öffentliche Funktion Datei_Zuende mit dem Parameter datei vom Typ Datei Referenz, gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"<datei> zuende ist"

[
	Ob die Datei nicht zuende gelesen wurde.
]
Die öffentliche Funktion Datei_Nicht_Zuende mit dem Parameter datei vom Typ Datei Referenz, gibt einen Wahrheitswert zurück, macht:
	Gib nicht datei zuende ist zurück.
Und kann so benutzt werden:
	"<datei> nicht zuende ist"

[
	Liest die nächsten N Byte aus der Datei und gibt sie als Text zurück.
]
Die öffentliche Funktion Datei_Lies_N_Zeichen mit den Parametern datei und N vom Typ Datei Referenz und Zahl, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"die nächsten <N> Zeichen aus <datei>"

[
	Liest die nächste Zeile aus der Datei und gibt sie als Text zurück.
]
Die öffentliche Funktion Datei_Lies_Zeile mit dem Parameter datei vom Typ Datei Referenz, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"die nächste Zeile aus <datei>" oder
	"die naechste Zeile aus <datei>"

[
	Liest das nächste Wort ohne Leerzeichen aus der Datei und gibt es als Text zurück.
]
Die öffentliche Funktion Datei_Lies_Wort mit dem Parameter datei vom Typ Datei Referenz, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"das nächste Wort aus <datei>" oder
	"das naechste Wort aus <datei>"

[
	(das nächste Wort aus datei) als Zahl

	Meldet einen Fehler, wenn das nächste Wort keine Zahl war.
]
Die öffentliche Funktion Datei_Lies_Zahl mit dem Parameter datei vom Typ Datei Referenz, gibt eine Zahl zurück, macht:
	Der Text wort ist das nächste Wort aus datei.
	Wenn nicht wort eine Zahl ist, dann:
		Melde den Fehler "Keine Zahl gefunden".
	Gib wort als Zahl zurück.
Und kann so benutzt werden:
	"die nächste Zahl aus <datei>" oder
	"die naechste Zahl aus <datei>"

[
	(das nächste Wort aus datei) als Kommazahl

	Meldet einen Fehler, wenn das nächste Wort keine Kommazahl war.
]
Die öffentliche Funktion Datei_Lies_Kommazahl mit dem Parameter datei vom Typ Datei Referenz, gibt eine Kommazahl zurück, macht:
	Der Text wort ist das nächste Wort aus datei.
	[jede Zahl kann auch als Kommazahl formatiert werden]
	Wenn nicht wort eine Zahl ist, dann:
		Melde den Fehler "Keine Kommazahl gefunden".
	Gib wort als Kommazahl zurück.
Und kann so benutzt werden:
	"die nächste Kommazahl aus <datei>" oder
	"die naechste Kommazahl aus <datei>"
