[
	Duden/Netzwerk stellt low-level Funktionen zum Arbeiten mit Sockets zur Verfügung.
]

Binde "Duden/C" ein.
Binde "Duden/Fehlerbehandlung" ein.
Binde "Duden/Laufzeit" ein.
Binde "Duden/Texte" ein.

Der extern sichtbare Wahrheitswert ddp_netzwerk_timout ist falsch.

Die öffentliche Funktion Gab_Zeitüberschreitung gibt einen Wahrheitswert zurück, macht:
	Gib ddp_netzwerk_timout zurück.
Und kann so benutzt werden:
	"es dabei <!k>eine Zeitüberschreitung gab" oder
	"es dabei <!k>eine Zeitueberschreitung gab"

Die Funktion Init_Windows gibt einen Wahrheitswert zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"windows sockets initialisiert wurden"

Der Wahrheitswert windows_initialisiert ist wahr, wenn windows sockets initialisiert wurden.

Wir definieren eine AddressInfo öffentlich als einen Zeiger.

Wir nennen die öffentliche Kombination aus
    der Zahl padding1,
    der Zahl padding2,
    der Zahl padding3,
    der Zahl padding4,
    der Zahl padding5,
    der Zahl padding6,
    der Zahl padding7,
    der Zahl padding8,
    der Zahl padding9,
    der Zahl padding10,
    der Zahl padding11,
    der Zahl padding12,
    der Zahl padding13,
    der Zahl padding14,
    der Zahl padding15,
    der Zahl padding16,
    dem C_int size,
eine KlientenAddresse,
und erstellen sie so:
    "eine leere KlientenAddresse",
    "eine ungefüllte KlientenAddresse"

Wir nennen die öffentliche Kombination aus
    dem C_int fd,
    dem C_int familie,
    dem C_int typ,
einen Socket.

[ AF_UNSPEC ]
Der öffentliche C_int IPV4_ODER_IPV6 ist 0 als Buchstabe als C_int.
[ AF_INET ]
Der öffentliche C_int IPV4 ist 2 als Buchstabe als C_int.
[ SOCK_STREAM ]
Der öffentliche C_int TCP ist 1 als Buchstabe als C_int.
[ SOCK_DGRAM ]
Der öffentliche C_int UDP ist 2 als Buchstabe als C_int.

Die oeffentliche Funktion Socket_Als_Zahl mit dem Parameter s vom Typ Socket, gibt eine Zahl zurück, macht:
	Gib (fd von s) als Buchstabe als Zahl zurück.
Und überlädt den "als" Operator.

[ AF_INET6 ]
Die öffentliche Funktion AF_IPV6 gibt einen C_int zurück, macht:
	Gib (26, falls das Betriebssystem gleich "Windows" ist, ansonsten 10) als Buchstabe als C_int zurück.
Und kann so benutzt werden:
	"IPV6"

Die öffentliche Funktion Lade_AddressInfo mit den Parametern familie, typ, name und service vom Typ C_int, C_int, Text und Text, gibt eine AddressInfo zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "die AddressInfo der Familie <familie> vom Typ <typ> für den Namen <name> und den Service <service>" oder
    "die <familie> <typ> AddressInfo für den Namen <name> und den Service <service>" oder
    "eine AddressInfo der Familie <familie> vom Typ <typ> für den Namen <name> und den Service <service>" oder
    "eine <familie> <typ> AddressInfo für den Namen <name> und den Service <service>"

Die öffentliche Funktion freeaddrinfo mit dem Parameter info vom Typ AddressInfo, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Befreie <info>"

[
    Wandelt die ERSTE addresse in AddrInfo zu einem Text um.
]
Die öffentliche Funktion AddressInfo_zu_Text mit dem Parameter info vom Typ AddressInfo, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
und überlädt den "als" Operator.

Die öffentliche Funktion Socket_Erstellen mit den Parametern familie und typ vom Typ C_int und C_int, gibt einen Socket zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "ein Socket der Familie <familie> vom Typ <typ>",
    "einen Socket der Familie <familie> vom Typ <typ>"

Die öffentliche Funktion Socket_Erstellen_Typ mit dem Parameter typ vom Typ C_int, gibt einen Socket zurück, macht:
	Gib einen Socket der Familie IPV4 vom Typ typ zurück.
Und kann so benutzt werden:
    "ein <typ> Socket",
    "einen <typ> Socket"

Die Funktion Schließe_Socket_Windows mit dem Parameter sock vom Typ Socket, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"schließe <sock> unter Windows"

Die öffentliche Funktion Schließe_Socket mit dem Parameter sock vom Typ Socket, gibt nichts zurück, macht:
	Wenn das Betriebssystem gleich "Windows" ist, schließe sock unter Windows.
	Sonst schließe (fd von sock).
Und kann so benutzt werden:
    "Schließe <sock>"

Die öffentliche Funktion Socket_Binden mit den Parametern sock und info vom Typ Socket und AddressInfo, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Setze <sock> auf <info>"

Die öffentliche Funktion Socket_Binden_Name_Service mit den Parametern sock, name und service vom Typ Socket, Text und Text, gibt nichts zurück, macht:
    Die AddressInfo info ist die AddressInfo der Familie (familie von sock) vom Typ (typ von sock) für den Namen name und den Service service.
    Setze sock auf info.
    Befreie info.
Und kann so benutzt werden:
    "Setze <sock> auf <name> <service>"

Die öffentliche Funktion Socket_Binden_Name_Port mit den Parametern sock, name und service vom Typ Socket, Text und Zahl, gibt nichts zurück, macht:
    Setze sock auf name (service als Text).
Und kann so benutzt werden:
    "Setze <sock> auf <name> <service>"

Die öffentliche Funktion Socket_Verbinden mit den Parametern sock und info vom Typ Socket und AddressInfo, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Verbinde <sock> mit <info>"

Die öffentliche Funktion Socket_Verbinden_Name_Service mit den Parametern sock, name und service vom Typ Socket, Text und Text, gibt nichts zurück, macht:
    Die AddressInfo info ist die AddressInfo der Familie (familie von sock) vom Typ (typ von sock) für den Namen name und den Service service.
    Verbinde sock mit info.
    Befreie info.
Und kann so benutzt werden:
    "Verbinde <sock> mit <name> <service>"

Die öffentliche Funktion Socket_Verbinden_Name_Port mit den Parametern sock, name und port vom Typ Socket, Text und Zahl, gibt nichts zurück, macht:
    Verbinde sock mit name (port als Text).
Und kann so benutzt werden:
    "Verbinde <sock> mit <name> <port>"

Die öffentliche Funktion Socket_Zuhoeren mit den Parametern sock und backlog vom Typ Socket und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Lass <sock> auf maximal <backlog> Verbindungen warten" oder
    "Lass <sock> auf maximal <backlog> Verbindung warten"

Die öffentliche Funktion Socket_Verbindung_Annehmen mit den Parametern sock und client vom Typ Socket und KlientenAddresse Referenz, gibt einen Socket zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "die nächste Verbindung von <client> auf <sock>"

Die öffentliche Funktion Socket_Verbindung_Annehmen_Ohne_Klient mit dem Parameter sock vom Typ Socket, gibt einen Socket zurück, macht:
    Die KlientenAddresse client ist eine leere KlientenAddresse.
    Der Socket verbindung ist die nächste Verbindung von client auf sock.
    Gib verbindung zurück.
Und kann so benutzt werden:
    "die nächste Verbindung auf <sock>"

Die öffentliche Funktion Socket_Senden mit den Parametern verbindung und daten vom Typ Socket und Byte Listen Referenz, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Sende <daten> über <verbindung>" oder
    "wie viele Bytes von <daten> über <verbindung> gesendet wurden"

Die öffentliche Funktion Socket_Senden_Wert mit den Parametern verbindung und daten vom Typ Socket und Byte Liste, gibt eine Zahl zurück, macht:
	Gib wie viele Bytes von daten über verbindung gesendet wurden zurück.
Und kann so benutzt werden:
    "Sende <daten> über <verbindung>" oder
    "wie viele Bytes von <daten> über <verbindung> gesendet wurden"

Die öffentliche Funktion Socket_Empfangen mit den Parametern verbindung und max vom Typ Socket und Zahl, gibt eine Byte Liste zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "maximal <max> Bytes aus <verbindung>",
    "maximal die nächsten <max> Bytes aus <verbindung>",
    "maximal den nächsten <max> Bytes aus <verbindung>"

Die öffentliche Funktion Socket_Senden_An_Klient mit den Parametern verbindung, daten und client vom Typ Socket, Byte Listen Referenz und KlientenAddresse, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Sende <daten> über <verbindung> an <client>" oder
    "wie viele Bytes von <daten> über <verbindung> an <client> gesendet wurden"

Die öffentliche Funktion Socket_Senden_An mit den Parametern verbindung, daten und info vom Typ Socket, Byte Listen Referenz und AddressInfo, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "Sende <daten> über <verbindung> an <info>" oder
    "wie viele Bytes von <daten> über <verbindung> an <info> gesendet wurden"

Die öffentliche Funktion Socket_Empfangen_Von mit den Parametern verbindung, max und client vom Typ Socket, Zahl und KlientenAddresse Referenz, gibt eine Byte Liste zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
    "das nächste maximal <max> Bytes große Packet aus <verbindung> von <client>",
    "dem nächsten maximal <max> Bytes großen Packet aus <verbindung> von <client>"

Die öffentliche Funktion Socket_Empfangen_Von_Ohne_Klient mit den Parametern verbindung und max vom Typ Socket und Zahl, gibt eine Byte Liste zurück, macht:
    Die KlientenAddresse client ist eine leere KlientenAddresse.
    Gib das nächste maximal max Bytes große Packet aus verbindung von client zurück.
Und kann so benutzt werden:
    "das nächste maximal <max> Bytes große Packet aus <verbindung>",
    "dem nächsten maximal <max> Bytes großen Packet aus <verbindung>"

Die öffentliche Funktion Socket_Senden_Text mit den Parametern verbindung und daten vom Typ Socket und Text Referenz, gibt eine Zahl zurück, macht:
	Gib wie viele Bytes von (den Bytes von daten) über verbindung gesendet wurden zurück.
Und kann so benutzt werden:
    "Sende <daten> über <verbindung>" oder
    "wie viele Bytes von <daten> über <verbindung> gesendet wurden"

Die öffentliche Funktion Socket_Senden_Text_Wert mit den Parametern verbindung und daten vom Typ Socket und Text, gibt eine Zahl zurück, macht:
	Gib wie viele Bytes von daten über verbindung gesendet wurden zurück.
Und kann so benutzt werden:
    "Sende <daten> über <verbindung>" oder
    "wie viele Bytes von <daten> über <verbindung> gesendet wurden"

Die öffentliche Funktion Socket_Empfangen_Text mit den Parametern verbindung und max vom Typ Socket und Zahl, gibt einen Text zurück, macht:
    Gib die Bytes (maximal max Bytes aus verbindung) als Text zurück.
Und kann so benutzt werden:
    "der maximal <max> Bytes lange Text aus <verbindung>",
    "der nächste maximal <max> Bytes lange Text aus <verbindung>",
    "dem nächste maximal <max> Bytes lange Text aus <verbindung>"

Die öffentliche Funktion Socket_Senden_An_Klient_Text mit den Parametern verbindung, daten und client vom Typ Socket, Text Referenz und KlientenAddresse, gibt eine Zahl zurück, macht:
	Gib wie viele Bytes von (den Bytes von daten) über verbindung gesendet wurden zurück.
Und kann so benutzt werden:
    "Sende <daten> über <verbindung> an <client>" oder
    "wie viele Bytes von <daten> über <verbindung> an <client> gesendet wurden"

Die öffentliche Funktion Socket_Senden_An_Text mit den Parametern verbindung, daten und info vom Typ Socket, Text Referenz und AddressInfo, gibt eine Zahl zurück, macht:
	Gib wie viele Bytes von daten über verbindung an info gesendet wurden zurück.
Und kann so benutzt werden:
    "Sende <daten> über <verbindung> an <info>" oder
    "wie viele Bytes von <daten> über <verbindung> an <info> gesendet wurden"

Die öffentliche Funktion Socket_Empfangen_Von_Text mit den Parametern verbindung, max und client vom Typ Socket, Zahl und KlientenAddresse Referenz, gibt einen Text zurück, macht:
	Gib die Bytes (das nächste maximal max Bytes große Packet aus verbindung von client) als Text zurück.
Und kann so benutzt werden:
    "der nächste maximal <max> Bytes große Text aus <verbindung> von <client>",
    "dem nächsten maximal <max> Bytes großen Text aus <verbindung> von <client>"

Die öffentliche Funktion Socket_Empfangen_Von_Ohne_Klient_Text mit den Parametern verbindung und max vom Typ Socket und Zahl, gibt einen Text zurück, macht:
    Die KlientenAddresse client ist eine leere KlientenAddresse.
    Gib die Bytes (das nächste maximal max Bytes große Packet aus verbindung von client) als Text zurück.
Und kann so benutzt werden:
    "der nächste maximal <max> Bytes große Text aus <verbindung>",
    "dem nächsten maximal <max> Bytes großen Text aus <verbindung>"

Die Funktion Socket_Timeout_Setzen mit den Parametern socket, timeout und senden vom Typ Socket, Zahl und Wahrheitswert, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"Setze das Zeitüberschreitungslimit von <socket> auf <timeout>ms (Senden ist <senden>)"

Die öffentliche Funktion Socket_Timeout_Setzen_Senden mit den Parametern socket und timeout vom Typ Socket und Zahl, gibt nichts zurück, macht:
	Setze das Zeitüberschreitungslimit von socket auf timeout ms (Senden ist wahr).
Und kann so benutzt werden:
	"Setze das Zeitüberschreitungslimit von <socket> fürs Senden auf <timeout>ms" oder
	"Setze das Zeitüberschreitungslimit von <socket> fürs Senden auf <timeout> Millisekunden"

Die öffentliche Funktion Socket_Timeout_Setzen_Empfangen mit den Parametern socket und timeout vom Typ Socket und Zahl, gibt nichts zurück, macht:
	Setze das Zeitüberschreitungslimit von socket auf timeout ms (Senden ist falsch).
Und kann so benutzt werden:
	"Setze das Zeitüberschreitungslimit von <socket> fürs Empfangen auf <timeout>ms" oder
	"Setze das Zeitüberschreitungslimit von <socket> fürs Empfangen auf <timeout> Millisekunden"

[ Polling ]

[
	Kombination aus einem Socket und einem events Byte, der eine Kombination der POLL_EVENT_* Bitflags ist.
]
Wir nennen die öffentliche Kombination aus
	dem öffentlichen Socket sock, [ Der Socket auf den gepollt wird ]
	dem öffentlichen Byte events, [ die Ein und Ausgabe Bitflags ]
einen PollFd,
und erstellen sie so:
	"einen PollFd für <sock> mit <events>"


Die oeffentliche Konstante POLL_EVENT_IN ist 1. [ read/accept bereit ]
Die oeffentliche Konstante POLL_EVENT_OUT ist 2. [ write bereit ]
Die oeffentliche Konstante POLL_EVENT_ERR ist 4. [ socket ist in Fehlerzustand ]
Die oeffentliche Konstante POLL_EVENT_HUP ist 8. [ hung-up bzw. die Verbindung wurde geschlossen ]
Die oeffentliche Konstante POLL_EVENT_NVAL ist 16. [ socket war nicht offen ]

[
	Wartet maximal timout Millisekunden darauf, dass einer der Sockets auf ein Event reagiert.
	Gib zurück wie viele Sockets reagiert haben, oder 0 falls es zu einer Zeitüberschreitung oder einer Unterbrechung kam.
	Diese Funktion setzt die entsprechenden Bitflags als Rückgabe.
]
Die öffentliche Funktion Socket_Poll mit den Parametern fds und timeout vom Typ PollFd Listen Referenz und Zahl, gibt eine Zahl zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"die Anzahl der Sockets in <fds>, die nach maximal <timeout>ms reagiert haben"

[
	Wandelt eine Liste von Sockets in eine Liste von PollFd um, die alle das gleiche Event haben
]
Die öffentliche Funktion Socket_Liste_Zu_PollFd mit den Parametern sockets und events vom Typ Socket Listen Referenz und Byte, gibt eine PollFd Liste zurück, macht:
	Die PollFd Liste fds ist die Länge von sockets Mal der Standardwert von einem PollFd.
	Für jeden Socket socket mit Index i in sockets, speichere einen PollFd für socket mit events in fds an der Stelle i.
	Gib fds zurück.
Und kann so benutzt werden:
	"eine PollFd Liste aus <sockets> für <events>"