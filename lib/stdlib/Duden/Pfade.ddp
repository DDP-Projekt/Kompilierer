[
	Pfad Manipulationsfunktionen. NUR FÜR UNIX!
]


Binde "Duden/Texte" ein.
Binde Betriebssystem aus "Duden/Laufzeit" ein.

[
	Gibt den Pfad-Trennzeichen, der dem Betriebssystem entspricht zurück.
	Auf Linux: '/'
	Auf Windows: '\'
]
Die öffentliche Funktion Trenn_Zeichen gibt einen Buchstaben zurück, macht:
	Wenn das Betriebssystem gleich "Windows" ist, gib '\\' zurück.
	Gib '/' zurück.
Und kann so benutzt werden:
	"Pfad-Trennzeichen",
	"den Pfad-Trennzeichen",
	"das Pfad-Trennzeichen"

[
	Gibt zurück ob der gegebene UNIX Pfad ein absoluter oder relativer Pfad ist
]
Die öffentliche Funktion Ist_Absolut mit dem Parameter t vom Typ Text, gibt einen Boolean zurück, macht:
	Gib '/' am Anfang von t steht zurück.
Und kann so benutzt werden:
	"<t> ein Absoluter Pfad ist"

[
	Gibt den Pfad ohne den letzen Element zurück. 
	Falls der Pfad leer ist, wird ein "." zurück gegeben.
	Falls der Pfad nur aus "/" gefolg von nicht-"/" Zeichen, wird "/" zurückgegeben.
]
Die öffentliche Funktion Ordner_Pfad mit dem Parameter t vom Typ Text, gibt einen Text zurück, macht:
	Die Zahl i ist die Länge von t.
	
	Solange i größer als 0 ist, mache:
		Wenn t an der Stelle i gleich '/' ist, dann:
			Der Text dir ist t von 1 bis i.
			Entferne alle '/' nach dir.
			Wenn die Länge von dir gleich 0 ist, gib "/" zurück.

			Gib dir zurück.
		Verringere i um 1.
	Gib "." zurück.
Und kann so benutzt werden:
	"den Ordnerpfad von <t>"


[
	Gibt den letzten Element eines Pfades zurück. Falls der Pfad leer ist, wird "." ausgegeben.
]
Die öffentliche Funktion Basis_Pfad mit dem Parameter t vom Typ Text, gibt einen Text zurück, macht:
	Der Text t2 ist (t mit allen '/' danach entfernt).
	Die Zahl i ist die Länge von t2.
	Solange i größer als 0 ist, mache:
		Wenn t2 an der Stelle i gleich '/' ist, dann:
			Gib t2 von (i plus 1) bis (die Länge von t2) zurück.
		Verringere i um 1.
	Gib "." zurück.
Und kann so benutzt werden:
	"den Basispfad von <t>",
	"der Basispfad von <t>"

[
	Gibt die Erweiterung einer Datei zurück. Wenn der Pfad eines Ordners gegeben wurde 
	oder der Parameter t leer ist, wird einen leeren Text zurück gegeben.
]
Die öffentliche Funktion Erweiterung mit dem Parameter t vom Typ Text, gibt einen Text zurück, macht:
	Die Zahl i ist die Länge von t.
	Solange i größer als 0 ist, mache:
		Wenn t an der Stelle i gleich '/' ist, gib "" zurück.
		Wenn t an der Stelle i gleich '.' ist, gib t von i bis (die Länge von t) zurück.
		Verringere i um 1.
	Gib "" zurück.
Und kann so benutzt werden:
	"die Erweiterung der Datei bei <t>"

[
	Gibt den Dateinamen einer Datei zurück.
]
Die öffentliche Funktion Datei_Name mit dem Parameter t vom Typ Text, gibt einen Text zurück, macht:
	Der Text bf ist der Basispfad von t.
	Wenn bf gleich "." ist, gib "" zurück.
	Die Zahl i ist 1.
	Solange i kleiner als, oder die Länge von bf ist und bf an der Stelle i ungleich '.' ist, erhöhe i um 1.
	Gib bf von 1 bis (i minus 1) zurück.
Und kann so benutzt werden:
	"den Dateinamen von <t>",
	"der Dateiname von <t>"

[
	Säubert/Normalisiert einen UNIX Pfad:
	- Ersetzt mehrere aufeinderfolgende '/' durch einen ("///" -> "/")
	- Entfernt '.' pfade ("a/." -> "a")
	- Entfernt innere '..' pfade und das (nicht-..) element das davor steht ("a/b/.." -> "a")
	- Entfernt .. elemente die nach root stehen ("/.." -> "/")

	Der gesäuberter Pfad endet mit einem '/' nur wenn es root ist.
	Ein leerer Pfad gibt "." zurück.

	Entspricht Go's path.clean funktion
	https://pkg.go.dev/path#Clean
]
Die öffentliche Funktion Säubern mit dem Parameter t vom Typ Text, gibt einen Text zurück, macht:
	Wenn t gleich "" ist, gib "." zurück.
	Der Boolean rooted ist wahr, wenn t an der Stelle 1 gleich '/' ist.
	Die Zahl n ist die Länge von t.
	Der Text path ist "". [ output text ]
	Die Zahl r ist 1. [ next index to process ]
	Die Zahl dotdot ist 1. [ index where .. must stop ]
	Wenn rooted gleich wahr ist, dann:
		Füge '/' an path an.
		Speichere 2 in r.
		Speichere 2 in dotdot.

	Solange r kleiner als, oder n ist, mache:
		[Schreibe r auf eine Zeile.]
		Wenn t an der Stelle r gleich '/' ist, dann:
			[ empty path element ]
			Erhöhe r um 1. [skip /]
		Wenn aber t an der Stelle r gleich '.' ist und (r gleich n ist oder t an der Stelle (r plus 1) gleich '/' ist), dann:
			[ . element ]
			Erhöhe r um 1. [skip .]
		Wenn aber t an der Stelle r gleich '.' ist und t an der Stelle (r plus 1) gleich '.' ist und (r plus 1 gleich n ist oder t an der Stelle (r plus 2) gleich '/' ist), dann:
			[ .. element: remove last / ]
			Erhöhe r um 2. 
			Wenn die Länge von path größer als, oder dotdot ist, dann:
				Mache:
					Wenn die Länge von path gleich 1 ist, dann:
						Speichere "" in path.
					Sonst
						Speichere path von 1 bis (die Länge von path minus 1) in path.
				Solange die Länge von path größer als dotdot ist und path an der Stelle (die Länge von path minus 1) ungleich '/' ist.
			Wenn aber rooted gleich falsch ist, dann:
				[ cannot backtrack, but not rooted, so append .. element ]
				Wenn die Länge von path größer als 0 ist, dann:
					Füge '/' an path an.
				Füge ".." an path an.
				Speichere die Länge von path in dotdot.
		Sonst:
			[ add slash if needed ]
			Wenn rooted und die Länge von path ungleich 1 ist oder nicht rooted und die Länge von path ungleich 0 ist, dann:
				Füge '/' an path an.

			Solange r kleiner als, oder n ist und t an der Stelle r ungleich '/' ist, mache:
				Füge (t an der Stelle r) an path an.
				Erhöhe r um 1.

	Wenn path leer ist, speichere "." in path.
	Gib path zurück.
Und kann so benutzt werden:
	"der Pfad <t> gesäubert"

[
	Verbindet zwei UNIX Pfade mit einem '/' und säubert zuletzt.
]
Die öffentliche Funktion Verbinden mit den Parametern a und b vom Typ Text und Text, gibt einen Text zurück, macht:
	Wenn a leer ist, gib b zurück.
	Wenn b leer ist, gib a zurück.
	Gib der Pfad (a verkettet mit '/' verkettet mit b) gesäubert zurück.
Und kann so benutzt werden:
	"die Pfade <a> und <b> verbunden"