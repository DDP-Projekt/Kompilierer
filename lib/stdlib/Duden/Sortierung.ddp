[
	Tauscht die Werte von a und b.
]
Die Funktion Tausche_Zahl mit den Parametern a und b vom Typ Zahlen Referenz und Zahlen Referenz, gibt nichts zurück, macht:
	Die Zahl temp ist a.
	Speichere b in a.
	Speichere temp in b.
Und kann so benutzt werden:
	"tausche <a> und <b>" oder
	"Tausche <a> und <b>"

Die Funktion Quicksort_Rec mit den Parametern liste, li und re vom Typ Zahlen Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	Wenn re kleiner als, oder li ist, verlasse die Funktion.

	Die Zahl pivot ist liste an der Stelle re.
	Die Zahl i ist li minus 1.
	Die Zahl j ist re.

	Der Boolean weiter ist wahr.
	Solange weiter, mache:
		Mache:
			Erhöhe i um 1.
		Solange liste an der Stelle i kleiner als pivot ist.
		Mache:
			Verringere j um 1.
		Solange j größer als, oder li ist und liste an der Stelle j größer als pivot ist.

		Wenn i größer als, oder j ist, speichere falsch in weiter.
		Sonst tausche (liste an der Stelle i) und (liste an der Stelle j).

	Tausche (liste an der Stelle i) und (liste an der Stelle re).

	quicksort-rec liste li (i minus 1).
	quicksort-rec liste (i plus 1) re.
Und kann so benutzt werden:
	"quicksort-rec <liste> <li> <re>"

[
	Eine Funktion, die die Zahlen Liste <liste> mit dem Quick-Sort Algorithmus sortiert.
	Zeitkomplexität: O(n * log(n))
]
Die öffentliche Funktion Quicksort_Neu_Ref mit dem Parameter liste vom Typ Zahlen Listen Referenz, gibt nichts zurück, macht:
	quicksort-rec liste 1 (die Länge von liste).
Und kann so benutzt werden:
	"Sortiere <liste>" oder
	"Sortiere <liste> mit quick-sort"

[
	Eine Funktion, die die Zahlen Liste <liste> mit dem Quick-Sort Algorithmus sortiert und die sortierte Liste zurück gibt.
	Zeitkomplexität: O(n * log(n))
]
Die öffentliche Funktion Quicksort_Neu mit dem Parameter liste vom Typ Zahlen Liste, gibt eine Zahlen Liste zurück, macht:
	Sortiere liste mit quick-sort.
	Gib liste zurück.
Und kann so benutzt werden:
	"<liste> sortiert" oder
	"<liste> mit quick-sort sortiert"
