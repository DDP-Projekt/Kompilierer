Binde "Duden/Zeichen" ein.

[
	Gibt "" zurück.
	Nutzen: Der Text t ist ein leerer Text.
]
Die öffentliche Funktion Leerer_Text gibt einen Text zurück, macht:
	Gib "" zurück.
Und kann so benutzt werden:
	"ein leerer Text" oder
	"einen leeren Text"

[
	Entfernt eine feste Anzahl von Buchstaben vom Anfang eines gegebenen Textes.
	Ist die Länge des Textes kürzer als die zu löschende Anzahl, gibt die Funktion einen leeren Text zurück.
	Werte für Anzahl kleiner als 0 wird wie 0 gewertet.
	z.B.: 
		Der Text t ist "abcdef".
		Entferne 3 Buchstaben am Anfang von t.
		t: "def"

		Der Text t ist "abc".
		Entferne 5 Buchstaben am Anfang von t.
		t: ""
]
Die öffentliche Funktion Entferne_Anzahl_Vorne_Mutierend mit den Parametern text und anzahl vom Typ Text Referenz und Zahl, gibt nichts zurück, macht:
    Wenn die Länge von text kleiner als, oder anzahl ist, dann:
        Speichere "" in text.
    Sonst speichere text ab dem (anzahl plus 1). Element in text.
Und kann so benutzt werden:
    "Entferne <anzahl> Buchstaben am Anfang von <text>"

[
	Entfernt eine feste Anzahl von Buchstaben vom Ende eines gegebenen Textes.
	Ist die Länge des Textes kürzer als die zu löschende Anzahl, gibt die Funktion einen leeren Text zurück.
	Werte für Anzahl kleiner als 0 wird wie 0 gewertet.
	z.B.: 
		Der Text t ist "abcdef".
		Entferne 3 Buchstaben am Ende von t.
		t: "abc"

		Der Text t ist "abc".
		Entferne 5 Buchstaben am Ende von t.
		t: ""
]
Die öffentliche Funktion Entferne_Anzahl_Hinten_Mutierend mit den Parametern text und anzahl vom Typ Text Referenz und Zahl, gibt nichts zurück, macht:
    Wenn die Länge von text kleiner als, oder anzahl ist, dann:
        Speichere "" in text.
    Sonst speichere text bis zum (die Länge von text minus anzahl). Element in text.
Und kann so benutzt werden:
    "Entferne <anzahl> Buchstaben am Ende von <text>"

[
	Entfernt eine feste Anzahl von Buchstaben vom Anfang eines gegebenen Textes.
	Ist die Länge des Textes kürzer als die zu löschende Anzahl, gibt die Funktion einen leeren Text zurück.
	Werte für Anzahl kleiner als 0 wird wie 0 gewertet.
	z.B.: 
		Der Text t ist "abcdef".
		Entferne 3 Buchstaben am Anfang von t.
		t: "def"

		Der Text t ist "abc".
		Entferne 5 Buchstaben am Anfang von t.
		t: ""
]
Die öffentliche Funktion Entferne_Anzahl_Vorne mit den Parametern text und anzahl vom Typ Text und Zahl, gibt einen Text zurück, macht:
    Wenn die Länge von text kleiner als, oder anzahl ist, dann:
        Gib "" zurück.
    Gib text ab dem (anzahl plus 1). Element zurück.
Und kann so benutzt werden:
    "<text> mit den ersten <anzahl> Buchstaben entfernt"

[
	Entfernt eine feste Anzahl von Buchstaben vom Ende eines gegebenen Textes.
	Ist die Länge des Textes kürzer als die zu löschende Anzahl, gibt die Funktion einen leeren Text zurück.
	Werte für Anzahl kleiner als 0 wird wie 0 gewertet.
	z.B.: 
		Der Text t ist "abcdef".
		Entferne 3 Buchstaben am Ende von t.
		t: "abc"

		Der Text t ist "abc".
		Entferne 5 Buchstaben am Ende von t.
		t: ""
]
Die öffentliche Funktion Entferne_Anzahl_Hinten mit den Parametern text und anzahl vom Typ Text und Zahl, gibt einen Text zurück, macht:
    Wenn die Länge von text kleiner als, oder anzahl ist, dann:
        Gib "" zurück.
    Gib text bis zum (die Länge von text minus anzahl). Element zurück.
Und kann so benutzt werden:
    "<text> mit den letzten <anzahl> Buchstaben entfernt"

[
	Entfernt alle gegebenen Buchstaben vom Anfang eines gegebenen Textes.
	z.B.: 
		Der Text t ist "aaaaaaahallo"
		Entferne alle 'a' vor t.
		t: "hallo"
]
Die öffentliche Funktion Trim_Anfang mit den Parametern text und zeichen vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Wenn die Länge von text gleich 0 ist, verlasse die Funktion.
	Die Zahl index ist 1.
	Solange (text an der Stelle index) gleich zeichen ist, mache:
		Erhöhe index um 1.
		Wenn index größer als die Länge von text ist, dann:
			Speichere "" in text.
			Verlasse die Funktion.
	Speichere text ab dem index. Element in text.
Und kann so benutzt werden:
	"Entferne alle <zeichen> vor <text>"

[
	Siehe TrimAnfang
]
Die öffentliche Funktion Trim_Anfang_Wert mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Text zurück, macht:
	Entferne alle zeichen vor text.
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit allen <zeichen> davor entfernt"

[
	Entfernt alle gegebenen Buchstaben vom Ende eines gegebenen Textes.
	z.B.: 
		Der Text t ist "hallo!!!!!!!!!!"
		Entferne alle '!' nach t.
		t: "hallo"
]
Die öffentliche Funktion Trim_Ende mit den Parametern text und zeichen vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Wenn die Länge von text gleich 0 ist, verlasse die Funktion.

	Die Zahl index ist die Länge von text.
	Wenn index gleich 0 ist, verlasse die Funktion.
	Solange (text an der Stelle index) gleich zeichen ist, mache:
		Verringere index um 1.
		Wenn index kleiner als 1 ist, dann:
			Speichere "" in text.
			Verlasse die Funktion.

	Speichere text bis zum index. Element in text.
Und kann so benutzt werden:
	"Entferne alle <zeichen> nach <text>"

[
	Siehe TrimEnde
]
Die öffentliche Funktion Trim_Ende_Wert mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Text zurück, macht:
	Entferne alle zeichen nach text.
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit allen <zeichen> danach entfernt"

[
	Entfernt alle gegebenen Buchstaben vom Anfang und Ende eines gegebenen Textes.
	z.B.: 
		Der Text t ist "!!!!!hallo!!!!!!!!!!"
		Entferne alle '!' vor und nach t.
		t: "hallo"
]
Die öffentliche Funktion Trim mit den Parametern text und zeichen vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Wenn die Länge von text gleich 0 ist, verlasse die Funktion.
	
	Die Zahl startIndex ist 1.
	Die Zahl stopIndex ist die Länge von text.
	Solange (text an der Stelle startIndex) gleich zeichen ist und startIndex kleiner als die Länge von text ist, erhöhe startIndex um 1.
	Solange (text an der Stelle stopIndex) gleich zeichen ist und stopIndex ungleich 1 ist, verringere stopIndex um 1.
	Wenn startIndex gleich die Länge von text ist und stopIndex gleich 1 ist, dann:
	  	Speichere "" in text.
		Verlasse die Funktion.
	
	Speichere text im Bereich von startIndex bis stopIndex in text.
Und kann so benutzt werden:
	"Entferne alle <zeichen> vor und nach <text>"

[
	Siehe Trim
]
Die öffentliche Funktion Trim_Wert mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Text zurück, macht:
	Entferne alle zeichen vor und nach text.
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit allen <zeichen> davor und danach entfernt"

[
	Gibt zurück ob der gegebenen Text den gegebenen Buchstaben enthält. 
]
Die öffentliche Funktion Text_Enthält_Buchstabe mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Wahrheitswert zurück, macht:
	Für jeden Buchstaben b in text, wenn b gleich zeichen ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<text> <zeichen> enthält"

[
	Gibt zurück ob der gegebene Text (text) den Subtext (suchText) enthält.
]
Die öffentliche Funktion Text_Enthält_Text mit den Parametern text und suchText vom Typ Text und Text, gibt einen Wahrheitswert zurück, macht:
	Wenn text gleich suchText ist, gib wahr zurück.

	Die Zahl startIndex ist 0.
	Die Zahl endIndex ist die Länge von suchText.
	Wenn endIndex gleich 0 ist, gib falsch zurück.

	Solange endIndex kleiner als, oder die Länge von text ist, mache:
		Der Text subtext ist text im Bereich von startIndex bis endIndex.

		Wenn subtext gleich suchText ist, gib wahr zurück.
		
		Speichere startIndex plus die Länge von suchText in endIndex.
		Erhöhe startIndex um 1.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<text> <suchText> enthält"

[
	Gibt zurück ob der gegebene Text mit dem gegebenen Buchstaben anfängt.
]
Die öffentliche Funktion Beginnt_Mit_Buchstabe mit den Parametern text und buchstabe vom Typ Text und Buchstabe, gibt einen Wahrheitswert zurück, macht:
	Wenn die Länge von text gleich 0 ist, gib falsch zurück.
	Gib wahr, wenn (text an der Stelle 1) gleich buchstabe ist zurück.
Und kann so benutzt werden:
	"<buchstabe> am Anfang von <text> steht"

[
	Gibt zurück ob der gegebene Text mit dem gegebenen Text (suchText) anfängt.
]
Die öffentliche Funktion Beginnt_Mit_Text mit den Parametern text und suchText vom Typ Text und Text, gibt einen Wahrheitswert zurück, macht:
	Wenn die Länge von text gleich 0 ist oder die Länge von suchText gleich 0 ist, gib falsch zurück.
	Gib (text bis zum (die Länge von suchText). Element) gleich suchText ist zurück.
Und kann so benutzt werden:
	"<suchText> am Anfang von <text> steht"

[
	Gibt zurück ob der gegebene Text mit dem gegebenen Buchstaben endet.
]
Die öffentliche Funktion Endet_Mit_Buchstabe mit den Parametern text und buchstabe vom Typ Text und Buchstabe, gibt einen Wahrheitswert zurück, macht:
	Wenn die Länge von text gleich 0 ist, gib falsch zurück.
	Gib (text an der Stelle (die Länge von text)) gleich buchstabe ist zurück.
Und kann so benutzt werden:
	"<buchstabe> am Ende von <text> steht"

[
	Gibt zurück ob der gegebene Text mit dem gegebenen Text (suchText) endet.
]
Die öffentliche Funktion Endet_Mit_Text mit den Parametern text und suchText vom Typ Text und Text, gibt einen Wahrheitswert zurück, macht:
	Wenn die Länge von text gleich 0 ist oder die Länge von suchText gleich 0 ist, gib falsch zurück.
	Gib (text ab dem (die Länge von text minus die Länge von suchText plus 1). Element) gleich suchText ist zurück.
Und kann so benutzt werden:
	"<suchText> am Ende von <text> steht"

[
	Speichert einen leeren Text in text.
]
Die öffentliche Funktion Text_Leeren mit dem Parameter text vom Typ Text Referenz, gibt nichts zurück, macht:
	Speichere "" in text.
Und kann so benutzt werden:
	"Leere <text>"

[
	Fügt zwei Texte aneinander.
	f("ha", "lo") -> "halo"
]
Die öffentliche Funktion Text_An_Text_Fügen mit den Parametern text und elm vom Typ Text Referenz und Text, gibt nichts zurück, macht:
	Speichere text verkettet mit elm in text.
Und kann so benutzt werden:
	"Füge <elm> an <text> an"

[
	Fügt einen Buchstaben an einen Text.
	f("may", 'o') -> "mayo"
]
Die öffentliche Funktion Buchstabe_An_Text_Fügen mit den Parametern text und elm vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Speichere text verkettet mit elm in text.
Und kann so benutzt werden:
	"Füge <elm> an <text> an"

[
	Fügt einen Text 
]
Die öffentliche Funktion Text_In_Text_Einfügen mit den Parametern text, index und elm vom Typ Text Referenz, Zahl und Text, gibt nichts zurück, macht:
	Speichere text bis zum (index minus 1). Element verkettet mit elm verkettet mit text ab dem index. Element in text.
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <text>"

Die öffentliche Funktion Buchstabe_In_Text_Einfügen mit den Parametern text, index und elm vom Typ Text Referenz, Zahl und Buchstabe, gibt nichts zurück, macht:
	Speichere text bis zum (index minus 1). Element verkettet mit elm verkettet mit text ab dem index. Element in text.
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <text>"

[
	Fügt einen Text am Anfang eines Textes ein.
	f("hallo", " welt!") -> "hallo welt!"
]
Die öffentliche Funktion Text_Vor_Text_Stellen mit den Parametern text und elm vom Typ Text Referenz und Text, gibt nichts zurück, macht:
	Speichere elm verkettet mit text in text.
Und kann so benutzt werden:
	"Stelle <elm> vor <text>"

[
	Fügt einen Buchstaben am Anfang eines Textes ein.
	f("allo", 'h') -> "hallo"
]
Die öffentliche Funktion Buchstabe_Vor_Text_Stellen mit den Parametern text und elm vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Speichere elm verkettet mit text in text.
Und kann so benutzt werden:
	"Stelle <elm> vor <text>"

[
	Entfernt den Buchstaben an der Stelle index vom Text
]
Die öffentliche Funktion Lösche_Text mit den Parametern text und index vom Typ Text Referenz und Zahl, gibt nichts zurück, macht:
	Wenn die Länge von text gleich 0 ist, verlasse die Funktion.

	Wenn index gleich 1 ist und die Länge von text größer als 1 ist, dann:
		Speichere "" in text.
	Wenn aber index gleich 1 ist, dann:
		Speichere text ab dem 2. Element in text.
	Wenn aber index gleich die Länge von text ist, dann:
		Speichere text bis zum (die Länge von text minus 1). Element in text.
	Sonst:
		Speichere text bis zum (index minus 1). Element verkettet mit text ab dem (index plus 1). Element in text.
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <text>"

[
	Entfernt einen Bereich vom Text
]
Die öffentliche Funktion Lösche_Text_Bereich mit den Parametern text, start und end vom Typ Text Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	Wenn start gleich 1 ist, dann:
		Speichere text ab dem (end plus 1). Element in text.
	Sonst:
		Speichere text bis zum (start minus 1). Element verkettet mit text ab dem (end plus 1). Element in text.
Und kann so benutzt werden:
	"Lösche alle Elemente im Bereich von <start> bis <end> aus <text>"

[
	Füllt den Text mit dem gegebenen Buchstaben
]
Die öffentliche Funktion Fülle_Text mit den Parametern text und elm vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Für jede Zahl i von 1 bis die Länge von text, mache:
		Speichere elm in text an der Stelle i.
Und kann so benutzt werden:
	"Fülle <text> mit <elm>"

[
	Gibt den index des gegebenen Buchstaben im Text zurück oder -1 falls es nicht gefunden wurde. 
]
Die öffentliche Funktion Text_Index_Von_Buchstabe mit den Parametern text und elm vom Typ Text und Buchstabe, gibt eine Zahl zurück, macht:
	Wenn die Länge von text gleich 0 ist, gib -1 zurück.
	Für jede Zahl i von 1 bis (die Länge von text), Wenn text an der Stelle i gleich elm ist, gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <text>" oder
	"den Index von <elm> in <text>"

[
	Gibt ob der gegebene Text leer ist zurück
]
Die öffentliche Funktion Ist_Text_Leer mit dem Parameter text vom Typ Text, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn die Länge von text gleich 0 ist zurück.
Und kann so benutzt werden:
	"<text> leer ist"

[
	Gibt zurück ob ein Text in eine Zahl umgewandelt werden kann
]
Die öffentliche Funktion Text_Ist_Zahl mit dem Parameter t vom Typ Text, gibt einen Wahrheitswert zurück, macht:
	Die Zahl l ist die Länge von t.
	Wenn l kleiner als 1 ist, gib falsch zurück.

	Der Buchstabe Vorzeichen ist t an der Stelle 1.
	Wenn Vorzeichen eine Zahl ist, gib wahr zurück.
	Wenn Vorzeichen ungleich '+' ist und Vorzeichen ungleich '-' ist, gib falsch zurück.
	Wenn l kleiner als 2 ist oder nicht (t an der Stelle 2) eine Zahl ist, gib falsch zurück.
	Gib wahr zurück.
Und kann so benutzt werden:
	"<t> eine Zahl ist"

[
	Wandelt jeden Buchstaben des gegebenen Textes in die groß geschriebene Variante
]
Die öffentliche Funktion Großschreiben_Wert mit dem Parameter text vom Typ Text, gibt einen Text zurück, macht:
	Der Text neuerText ist "".
	Für jeden Buchstaben b in text, mache:
		Füge (b als großer Buchstabe) an neuerText an.
	Gib neuerText zurück.
Und kann so benutzt werden:
	"<text> groß geschrieben"

[
	Wandelt jeden Buchstaben des gegebenen Textes in die groß geschriebene Variante
]
Die öffentliche Funktion Großschreiben mit dem Parameter text vom Typ Text Referenz, gibt nichts zurück, macht:
	Speichere text groß geschrieben in text.
Und kann so benutzt werden:
	"Schreibe <text> groß"

[
	Wandelt jeden Buchstaben des gegebenen Textes in die klein geschriebene Variante
]
Die öffentliche Funktion Kleinschreiben_Wert mit dem Parameter text vom Typ Text, gibt einen Text zurück, macht:
	Der Text neuerText ist "".
	Für jeden Buchstaben b in text, mache:
		Füge (b als kleiner Buchstabe) an neuerText an.
	Gib neuerText zurück.
Und kann so benutzt werden:
	"<text> klein geschrieben"

[
	Wandelt jeden Buchstaben des gegebenen Textes in die klein geschriebene Variante
]
Die öffentliche Funktion Kleinschreiben mit dem Parameter text vom Typ Text Referenz, gibt nichts zurück, macht:
	Speichere text klein geschrieben in text.
Und kann so benutzt werden:
	"Schreibe <text> klein"

[
	z.B.:
	f("hallo", ' ', 8) -> "   hallo"
	f("hey", ' ', 8) -> "     hey"
	f("programm", ' ', 8) -> "programm"
	f("", 'o', 8) -> "oooooooo" 
]
Die öffentliche Funktion Polster_Links mit den Parametern text, zeichen und endlänge vom Typ Text, Buchstabe und Zahl, gibt einen Text zurück, macht:
	Die Zahl länge ist die Länge von text.
	Die Zahl gesuchteLänge ist endlänge minus länge.
	Wenn gesuchteLänge kleiner als, oder 0 ist, dann:
		Gib text zurück.
	
	Wiederhole:
		Stelle zeichen vor text.
	gesuchteLänge Mal.

	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit <endlänge> <zeichen> links gepolstert"

[
	z.B.:
	f("hallo", ' ', 8) -> "hallo   "
	f("hey", ' ', 8) -> "hey     "
	f("programm", ' ', 8) -> "programm"
	f("", 'o', 8) -> "oooooooo" 
]
Die öffentliche Funktion Polster_Rechts mit den Parametern text, zeichen und endlänge vom Typ Text, Buchstabe und Zahl, gibt einen Text zurück, macht:
	Die Zahl länge ist die Länge von text.
	Die Zahl gesuchteLänge ist endlänge minus länge.
	Wenn gesuchteLänge kleiner als, oder 0 ist, dann:
		Gib text zurück.
	
	Wiederhole:
		Füge zeichen an text an.
	gesuchteLänge Mal.
	
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit <endlänge> <zeichen> rechts gepolstert"

[
	Spaltet den gegebenen Text anhand des angegebenen Buchstaben in Teiltexte. 
]
Die öffentliche Funktion Spalte mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt eine Text Liste zurück, macht:
	Die Text Liste endliste ist eine leere Text Liste.
	Die Zahl endIndex ist der Index von zeichen in text.
	Solange endIndex ungleich -1 ist und endIndex ungleich die Länge von text ist, mache:
		Wenn endIndex ungleich 1 ist, dann:
			Speichere endliste verkettet mit text bis zum (endIndex minus 1). Element in endliste.
			Speichere text ab dem (endIndex plus 1). Element in text.
		Sonst:
			Speichere endliste verkettet mit "" in endliste.
			Speichere text ab dem 2. Element in text.
		Speichere der Index von zeichen in text in endIndex.
	
	Speichere endliste verkettet mit text in endliste.
	Gib endliste zurück.
Und kann so benutzt werden:
	"<text> an <zeichen> gespalten"

[
	Verkettet alle Elemente der Liste mit dem Trennzeichen und gibt den Text zurück.
	z.B.:
		f(["hi", "", "yo"], '-') -> "hi--yo"
]
Die öffentliche Funktion Verbinden_Text mit den Parametern liste und trennzeichen vom Typ Text Liste und Buchstabe, gibt einen Text zurück, macht:
	Der Text ret ist ein leerer Text.
	Für jede Zahl i von 1 bis die Länge von liste, mache:
		Wenn i kleiner als die Länge von liste ist, Speichere ret verkettet mit liste an der Stelle i verkettet mit trennzeichen in ret.
		Sonst Speichere ret verkettet mit liste an der Stelle i in ret.
	Gib ret zurück.
Und kann so benutzt werden:
	"<liste> mit dem Trennzeichen <trennzeichen> zum Text verbunden"

[
	Verkettet alle Elemente der Liste mit dem Trennzeichen und gibt den Text zurück.
	z.B.:
		f([1, 234, 56789, 0], '-') -> "1-234-56789-0"
]
Die öffentliche Funktion Verbinden_Zahl mit den Parametern liste und trennzeichen vom Typ Zahlen Liste und Buchstabe, gibt einen Text zurück, macht:
	Der Text ret ist ein leerer Text.
	Für jede Zahl i von 1 bis die Länge von liste, mache:
		Wenn i kleiner als die Länge von liste ist, Speichere ret verkettet mit (liste an der Stelle i) als Text verkettet mit trennzeichen in ret.
		Sonst Speichere ret verkettet mit (liste an der Stelle i) als Text in ret.
	Gib ret zurück.
Und kann so benutzt werden:
	"<liste> mit dem Trennzeichen <trennzeichen> zum Text verbunden"

[
	Verkettet alle Elemente der Liste mit dem Trennzeichen und gibt den Text zurück.
	z.B.:
		f([1,4, 0 durch 0, 23,0], '-') -> "1,4-nan-23"
]
Die öffentliche Funktion Verbinden_Kommazahl mit den Parametern liste und trennzeichen vom Typ Kommazahlen Liste und Buchstabe, gibt einen Text zurück, macht:
	Der Text ret ist ein leerer Text.
	Für jede Zahl i von 1 bis die Länge von liste, mache:
		Wenn i kleiner als die Länge von liste ist, Speichere ret verkettet mit (liste an der Stelle i) als Text verkettet mit trennzeichen in ret.
		Sonst Speichere ret verkettet mit (liste an der Stelle i) als Text in ret.
	Gib ret zurück.
Und kann so benutzt werden:
	"<liste> mit dem Trennzeichen <trennzeichen> zum Text verbunden"

[
	Verkettet alle Elemente der Liste mit dem Trennzeichen und gibt den Text zurück.
	z.B.:
		f(['a', 'b', 'c'], '-') -> "a-b-c"
]
Die öffentliche Funktion Verbinden_Buchstabe mit den Parametern liste und trennzeichen vom Typ Buchstaben Liste und Buchstabe, gibt einen Text zurück, macht:
	Der Text ret ist ein leerer Text.
	Für jede Zahl i von 1 bis die Länge von liste, mache:
		Wenn i kleiner als die Länge von liste ist, Speichere ret verkettet mit (liste an der Stelle i) verkettet mit trennzeichen in ret.
		Sonst Speichere ret verkettet mit (liste an der Stelle i) in ret.
	Gib ret zurück.
Und kann so benutzt werden:
	"<liste> mit dem Trennzeichen <trennzeichen> zum Text verbunden"

[
	Verkettet alle Elemente der Liste mit dem Trennzeichen und gibt den Text zurück.
	z.B.:
		f([wahr, falsch, falsch], '-') -> "wahr-falsch-falsch"
]
Die öffentliche Funktion Verbinden_Wahrheitswert mit den Parametern liste und trennzeichen vom Typ Wahrheitswert Liste und Buchstabe, gibt einen Text zurück, macht:
	Der Text ret ist ein leerer Text.
	Für jede Zahl i von 1 bis die Länge von liste, mache:
		Wenn i kleiner als die Länge von liste ist, Speichere ret verkettet mit (liste an der Stelle i) als Text verkettet mit trennzeichen in ret.
		Sonst Speichere ret verkettet mit (liste an der Stelle i) als Text in ret.
	Gib ret zurück.
Und kann so benutzt werden:
	"<liste> mit dem Trennzeichen <trennzeichen> zum Text verbunden"

[
	Berechnet die Hamming_Distanz zwischen t1 und t2:
		"karolin" und "kathrin" ist 3.
		"karolin" und "kerstin" ist 3.
		"kathrin" und "kerstin" ist 4

	Wenn die Länge der beiden Texte ungleich ist, wird -1 zurückgegeben:
		"karolin" und "karoli" ist -1.
]
Die öffentliche Funktion Hamming_Distanz mit den Parametern t1 und t2 vom Typ Text und Text, gibt eine Zahl zurück, macht:
	Wenn die Länge von t1 ungleich die Länge von t2 ist, gib -1 zurück.
	Die Zahl summe ist 0.
	Für jede Zahl i von 1 bis die Länge von t1, mache:
		Wenn t1 an der Stelle i ungleich t2 an der Stelle i ist, erhöhe summe um 1.
	Gib summe zurück.
Und kann so benutzt werden:
	"die Zahl der Änderungen benötigt um <t1> in <t2> umzuwandeln" oder
	"die Hamming-Distanz zwischen <t1> und <t2>"

Binde Min3 aus "Duden/Mathe" ein.
[
	Berechnet die Levenshtein Distanz zwischen zwei Texten:
		"Bar" und "Bar" ist 0
		"Bar" und "Bir" ist 1
		"Bar" und "Bier" ist 2
		"Bar" und "Ba" ist 1
		"kitten" und "sitting" ist 3
		"Google" und "Facebook" ist 8
		"Die Deutsche Programmiersprache" und "The German Programming language" ist 19
]
Die öffentliche Funktion Levenshtein_Distanz mit den Parametern t1 und t2 vom Typ Text und Text, gibt eine Zahl zurück, macht:
	Die Zahlen Liste cost ist die Länge von t2 plus 1 Mal 0.
	Die Zahlen Liste newCost ist die Länge von t2 plus 1 Mal 0.

	Für jede Zahl i von 0 bis die Länge von t2, mache:
		Speichere i in cost an der Stelle (i plus 1).

	Für jede Zahl i von 1 bis die Länge von t1, mache:
		Speichere i in newCost an der Stelle 1.
	
		Für jede Zahl j von 1 bis die Länge von t2, mache:
			Die Zahl deletionCost ist cost an der Stelle (j plus 1) plus 1.
			Die Zahl insertionCost ist newCost an der Stelle j plus 1.
			Die Zahl substitutionCost ist cost an der Stelle j.

			Wenn t1 an der Stelle i ungleich t2 an der Stelle j ist, erhöhe substitutionCost um 1.
			
			Speichere die kleinere Zahl von deletionCost, insertionCost und substitutionCost in newCost an der Stelle (j plus 1).
		Die Zahlen Liste temp ist cost.
		Speichere newCost in cost.
		Speichere temp in newCost.
	Gib cost an der Stelle (die Länge von t2 plus 1) zurück.
Und kann so benutzt werden:
	"wie ähnlich <t1> und <t2> sind" oder
	"die Levenshtein-Distanz zwischen <t1> und <t2>"

[
	Gibt 0 zurück wenn text1 gleich text2 ist.
	Gibt >0 zurück wenn der erste ungleiche Buchstabe in text1 größer als text2 ist
	Gibt <0 zurück wenn der erste ungleiche Buchstabe in text1 kleiner als text2 ist
	
	Wenn zwei Texte unterschiedlicher länge aber mit selben Präfix verglichen werden (z.B.: Haallö und Haallöchen)
	gibt die Funktion -1 wenn text2 und 1 wenn text1 länger ist zurück. 
]
Die öffentliche Funktion Vergleiche_Text mit den Parametern text1 und text2 vom Typ Text und Text, gibt eine Zahl zurück, macht:
	Wenn text1 gleich text2 ist, gib 0 zurück.

	Die Zahl i ist 1.
	Solange text1 an der Stelle i gleich text2 an der Stelle i ist, mache:
		Erhöhe i um 1.
		Wenn i größer als die Länge von text1 ist, gib -1 zurück.
		Wenn i größer als die Länge von text2 ist, gib 1 zurück.
		
	Gib (text1 an der Stelle i) als Zahl minus (text2 an der Stelle i) als Zahl zurück.
Und kann so benutzt werden:
	"<text1> mit <text2> verglichen"