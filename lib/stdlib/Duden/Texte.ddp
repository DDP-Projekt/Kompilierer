Binde "Duden/Zeichen" ein.

Die Funktion TrimAnfang mit den Parametern text und zeichen vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Die Zahl index ist 1.
	Solange (text an der Stelle index) gleich zeichen ist, erhöhe index um 1.
	Speichere text von index bis (die Länge von text) in text.
Und kann so benutzt werden:
	"Entferne alle <zeichen> vor <text>"

Die Funktion TrimAnfangWert mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Text zurück, macht:
	Entferne alle zeichen vor text.
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit allen <zeichen> davor entfernt"

Die Funktion TrimEnde mit den Parametern text und zeichen vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Die Zahl index ist die Länge von text.
	Solange (text an der Stelle index) gleich zeichen ist, verringere index um 1.
	Speichere text von 1 bis index in text.
Und kann so benutzt werden:
	"Entferne alle <zeichen> nach <text>"

Die Funktion TrimEndeWert mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Text zurück, macht:
	Entferne alle zeichen nach text.
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit allen <zeichen> danach entfernt"

Die Funktion Trim mit den Parametern text und zeichen vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Die Zahl startIndex ist 1.
	Die Zahl stopIndex ist die Länge von text.
	Solange (text an der Stelle startIndex) gleich zeichen ist, erhöhe startIndex um 1.
	Solange (text an der Stelle stopIndex) gleich zeichen ist, verringere stopIndex um 1.
	Speichere text von startIndex bis stopIndex in text.
Und kann so benutzt werden:
	"Entferne alle <zeichen> vor und nach <text>"

Die Funktion TrimWert mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Text zurück, macht:
	Entferne alle zeichen vor und nach text.
	Gib text zurück.
Und kann so benutzt werden:
	"<text> mit allen <zeichen> davor und danach entfernt"

Die Funktion EnthältBuchstabe mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt einen Boolean zurück, macht:
	Für jeden Buchstaben b in text, wenn b gleich zeichen ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<text> <zeichen> enthält"

Die Funktion EnthältText mit den Parametern text und suchText vom Typ Text und Text, gibt einen Boolean zurück, macht:
	Die Zahl startIndex ist 0.
	Die Zahl endIndex ist die Länge von suchText.

	Solange endIndex kleiner als, oder die Länge von text ist, mache:
		Der Text subtext ist text von startIndex bis endIndex.

		Wenn subtext gleich suchText ist, gib wahr zurück.
		
		Speichere startIndex plus die Länge von suchText in endIndex.
		Erhöhe startIndex um 1.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<text> <suchText> enthält"

Die Funktion BeginntMitBuchstabe mit den Parametern text und buchstabe vom Typ Text und Buchstabe, gibt einen Boolean zurück, macht:
	Gib (text an der Stelle 1) gleich buchstabe ist zurück.
Und kann so benutzt werden:
	"<buchstabe> am Anfang von <text> steht"

Die Funktion BeginntMitText mit den Parametern text und suchText vom Typ Text und Text, gibt einen Boolean zurück, macht:
	Gib (text von 1 bis (die Länge von suchText)) gleich suchText ist zurück.
Und kann so benutzt werden:
	"<suchText> am Anfang von <text> steht"

Die Funktion EndetMitBuchstabe mit den Parametern text und buchstabe vom Typ Text und Buchstabe, gibt einen Boolean zurück, macht:
	Gib (text an der Stelle (die Länge von text)) gleich buchstabe ist zurück.
Und kann so benutzt werden:
	"<buchstabe> am Ende von <text> steht"

Die Funktion EndetMitText mit den Parametern text und suchText vom Typ Text und Text, gibt einen Boolean zurück, macht:
	Gib (text von die Länge von text minus die Länge von suchText plus 1 bis (die Länge von text)) gleich suchText ist zurück.
Und kann so benutzt werden:
	"<suchText> am Ende von <text> steht"

Die Funktion Text_leeren mit dem Parameter text vom Typ Text Referenz, gibt nichts zurück, macht:
	Speichere "" in text.
Und kann so benutzt werden:
	"Leere <text>"

Die Funktion Text_an_Text_fügen mit den Parametern text und elm vom Typ Text Referenz und Text, gibt nichts zurück, macht:
	Speichere text verkettet mit elm in text.
Und kann so benutzt werden:
	"Füge <elm> an <text> an"

Die Funktion Buchstabe_an_Text_fügen mit den Parametern text und elm vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Speichere text verkettet mit elm in text.
Und kann so benutzt werden:
	"Füge <elm> an <text> an"

Die Funktion Text_in_Text_einfügen mit den Parametern text, index und elm vom Typ Text Referenz, Zahl und Text, gibt nichts zurück, macht:
	Speichere text von 1 bis (index minus 1) verkettet mit elm verkettet mit text von index bis (die Länge von text) in text.
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <text>"

Die Funktion Buchstabe_in_Text_einfügen mit den Parametern text, index und elm vom Typ Text Referenz, Zahl und Buchstabe, gibt nichts zurück, macht:
	Speichere text von 1 bis (index minus 1) verkettet mit elm verkettet mit text von index bis (die Länge von text) in text.
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <text>"

Die Funktion Text_vor_Text_stellen mit den Parametern text und elm vom Typ Text Referenz und Text, gibt nichts zurück, macht:
	Speichere elm verkettet mit text in text.
Und kann so benutzt werden:
	"Stelle <elm> vor <text>"

Die Funktion Buchstabe_vor_Text_stellen mit den Parametern text und elm vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Speichere elm verkettet mit text in text.
Und kann so benutzt werden:
	"Stelle <elm> vor <text>"

Die Funktion Lösche_Text mit den Parametern text und index vom Typ Text Referenz und Zahl, gibt nichts zurück, macht:
	Speichere text von 1 bis (index minus 1) verkettet mit text von (index plus 1) bis (die Länge von text) in text.
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <text>"

Die Funktion Lösche_Text_Bereich mit den Parametern text, start und end vom Typ Text Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	Wenn start gleich 1 ist, dann:
		Speichere text von end plus 1 bis (die Länge von text) in text.
	Sonst:
		Speichere text von 1 bis (start minus 1) verkettet mit text von (end plus 1) bis (die Länge von text) in text.
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <text>"

Die Funktion Fülle_Text mit den Parametern text und elm vom Typ Text Referenz und Buchstabe, gibt nichts zurück, macht:
	Der Text neuerText ist "".
	Wiederhole:
		Speichere neuerText verkettet mit elm in neuerText.
	Die Länge von text Mal.

	Speichere neuerText in text.
Und kann so benutzt werden:
	"Fülle <text> mit <elm>"

Die Funktion IndexVonText mit den Parametern text und elm vom Typ Text und Buchstabe, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis (die Länge von text), Wenn text an der Stelle i gleich elm ist, gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <text>"

Die Funktion IstTextLeer mit dem Parameter text vom Typ Text, gibt einen Boolean zurück, macht:
	Gib [wahr wenn] die Länge von text gleich 0 ist zurück.
Und kann so benutzt werden:
	"<text> leer ist"

[ob ein Text in eine Zahl umgewandelt werden kann]
Die Funktion Ist_Zahl mit dem Parameter t vom Typ Text, gibt einen Boolean zurück, macht:
	Die Zahl l ist die Länge von t.
	Wenn l kleiner als 1 ist, gib falsch zurück.

	Der Buchstabe Vorzeichen ist t an der Stelle 1.
	Wenn Vorzeichen eine Zahl ist, gib wahr zurück.
	Wenn Vorzeichen ungleich '+' ist und Vorzeichen ungleich '-' ist, gib falsch zurück.
	Wenn l kleiner als 2 ist oder nicht (t an der Stelle 2) eine Zahl ist, gib falsch zurück.
	Gib wahr zurück.
Und kann so benutzt werden:
	"<t> eine Zahl ist"

Die Funktion GroßschreibenWert mit dem Parameter text vom Typ Text, gibt Text zurück, macht:
	Der Text neuerText ist "".
	Für jeden Buchstaben b in text, mache:
		Füge (b als großer Buchstabe) an neuerText an.
	Gib neuerText zurück.
Und kann so benutzt werden:
	"<text> groß geschrieben"

Die Funktion Großschreiben mit dem Parameter text vom Typ Text Referenz, gibt nichts zurück, macht:
	Speichere text groß geschrieben in text.
Und kann so benutzt werden:
	"Schreibe <text> groß"

Die Funktion KleinschreibenWert mit dem Parameter text vom Typ Text, gibt Text zurück, macht:
	Der Text neuerText ist "".
	Für jeden Buchstaben b in text, mache:
		Füge (b als kleiner Buchstabe) an neuerText an.
	Gib neuerText zurück.
Und kann so benutzt werden:
	"<text> klein geschrieben"

Die Funktion Kleinschreiben mit dem Parameter text vom Typ Text Referenz, gibt nichts zurück, macht:
	Speichere text klein geschrieben in text.
Und kann so benutzt werden:
	"Schreibe <text> klein"

Die Funktion PolsterLinks mit den Parametern text, zeichen und endlänge vom Typ Text, Buchstabe und Zahl, gibt einen Text zurück, macht:
	Die Zahl länge ist die Länge von text.
	Die Zahl gesuchteLänge ist endlänge minus länge.
	Wenn gesuchteLänge kleiner als, oder 0 ist, dann:
		Gib text zurück.
	
	Wiederhole:
		Stelle zeichen vor text.
	gesuchteLänge Mal.

	Gib text zurück.
Und kann so benutzt werden:
	"polster <text> mit <endlänge> <zeichen> links"

Die Funktion PolsterRechts mit den Parametern text, zeichen und endlänge vom Typ Text, Buchstabe und Zahl, gibt einen Text zurück, macht:
	Die Zahl länge ist die Länge von text.
	Die Zahl gesuchteLänge ist endlänge minus länge.
	Wenn gesuchteLänge kleiner als, oder 0 ist, dann:
		Gib text zurück.
	
	Wiederhole:
		Füge zeichen an text an.
	gesuchteLänge Mal.
	
	Gib text zurück.
Und kann so benutzt werden:
	"polster <text> mit <endlänge> <zeichen> rechts"

Die Funktion Spalte mit den Parametern text und zeichen vom Typ Text und Buchstabe, gibt eine Text Liste zurück, macht:
	Die Text Liste endliste ist eine leere Text Liste.
	Die Zahl endIndex ist der Index von zeichen in text.
	Solange endIndex ungleich -1 ist und endIndex ungleich die Länge von text ist, mache:
		Wenn endIndex ungleich 1 ist, dann:
			Speichere endliste verkettet mit text von 1 bis (endIndex minus 1) in endliste.
			Speichere text von endIndex plus 1 bis (die Länge von text) in text.
		Sonst:
			Speichere endliste verkettet mit "" in endliste.
			Speichere text von 2 bis (die Länge von text) in text.
		Speichere der Index von zeichen in text in endIndex.
	
	Speichere endliste verkettet mit text in endliste.
	Gib endliste zurück.
Und kann so benutzt werden:
	"<text> an <zeichen> gespalten"