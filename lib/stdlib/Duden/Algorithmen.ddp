[
	Eine Funktion, die den größten gemeinsamen Teiler zweier Zahlen, <a> und <b>, als Zahl zurück gibt.
	Zeitkomplexität: O(n)
]
Die Funktion ggV mit den Parametern a und b vom Typ Zahl und Zahl, gibt eine Zahl zurück, macht:
	Die Zahl t ist 0.
	Solange b ungleich 0 ist, mache:
		Speichere b in t.
		Speichere (a modulo t) in b.
		Speichere t in a.
	Gib a zurück.
Und kann so benutzt werden:
	"das größte gemeinsame Vielfache von <a> und <b>"

[
	Eine Funktion, die den kleinsten gemeinsamen Teiler zweier Zahlen, <a> und <b>, als Zahl zurück gibt.
	Zeitkomplexität: O(n)
]
Die Funktion kgV mit den Parametern a und b vom Typ Zahl und Zahl, gibt eine Zahl zurück, macht:
	Gib (der Betrag von (a mal b) durch (das größte gemeinsame Vielfache von a und b)) als Zahl zurück.
Und kann so benutzt werden:
	"das kleinste gemeinsame Vielfache von <a> und <b>"

[
	Eine Funktion, die eine Zahlen Liste von allen Primfaktoren der Zahl <z> gibt.  
	Zeitkomplexität: O(sqrt(n))
]
Die Funktion Primfaktorzerlegung mit dem Parameter z vom Typ Zahl, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste faktoren ist eine leere Zahlen Liste.

	Solange z modulo 2 gleich 0 ist, mache:
		Speichere faktoren verkettet mit 2 in faktoren.
		Speichere (z durch 2) als Zahl in z.

	Die Zahl i ist 3.
	Solange i kleiner als, oder die 2. Wurzel von z als Zahl ist, mache:
		Solange z modulo i gleich 0 ist, mache:
			Speichere faktoren verkettet mit i in faktoren.
			Speichere (z durch i) als Zahl in z.
		Erhöhe i um 2.

	Wenn z größer als 2 ist, dann:
		Speichere faktoren verkettet mit z in faktoren.

	Gib faktoren zurück.
Und kann so benutzt werden:
	"die Primfaktoren von <z>" oder
	"alle Primfaktoren von <z>"

[
	Gibt eine Zahlen Liste von alle Zahlen, die durch <z> geteilt werden können.
	Zeitkomplexität: O(n)
]
Die Funktion Teilerzerlegung mit dem Parameter z vom Typ Zahl, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste teiler ist eine leere Zahlen Liste.

	Für jede Zahl i von z bis 1 mit Schrittgröße -1, mache:
		Wenn z modulo i gleich 0 ist, speichere teiler verkettet mit i in teiler.	

	Gib teiler zurück.
Und kann so benutzt werden:
	"alle Teiler von <z>"

Die Funktion Tausche_Zahl mit den Parametern a und b vom Typ Zahlen Referenz und Zahlen Referenz, gibt nichts zurück, macht:
	Die Zahl temp ist a.
	Speichere b in a.
	Speichere temp in b.
Und kann so benutzt werden:
	"tausche <a> und <b>"

[
	Eine Funktion, die die Zahlen Liste <liste> mit dem Quick-Sort Algorithmus sortiert und die sortierte Liste zurück gibt.
	Zeitkomplexität: O(n * log(n))
]
Die Funktion Quicksort mit dem Parameter liste vom Typ Zahlen Liste, gibt eine Zahlen Liste zurück, macht:
	Wenn die Länge von liste kleiner als, oder 1 ist, gib liste zurück. [End-Bedingung der Rekursion]
	
	Die Zahl Teiler ist 0. [für später]
	:
		Die Zahl pivot ist liste an der Stelle die Länge von liste. [das pivot Element ist das letzte Element der Liste]
		[alle Elemente die größer als pivot sind kommen nach rechts, der Rest nach links, die Mitte wird in Teiler gespeichert]
		Die Zahl _links ist 1.
		Die Zahl _rechts ist die Länge von liste.
		Die Zahl i ist _links.
		Die Zahl j ist _rechts.

		Solange i kleiner als j ist, mache:
			Solange i kleiner als j und liste an der Stelle i kleiner als, oder pivot ist, erhöhe i um 1.
			Solange j größer als i und liste an der Stelle j größer als pivot ist, verringere j um 1.
			
			Wenn liste an der Stelle i größer als liste an der Stelle j ist, tausche (liste an der Stelle j) und (liste an der Stelle i).

		Wenn liste an der Stelle i größer als pivot ist, tausche (liste an der Stelle i) und (liste an der Stelle _rechts).
		Sonst speichere _rechts in i.
		Speichere i in Teiler.
	
	[sortiere die linke und rechte Hälfte rekursiv]
	Die Zahlen Liste linkeHälfte ist (liste von 1 bis (Teiler minus 1)) mit quick-sort sortiert.
	Die Zahlen Liste rechteHälfte ist (liste von Teiler bis die Länge von liste) mit quick-sort sortiert.

	Gib linkeHälfte verkettet mit rechteHälfte zurück.
Und kann so benutzt werden:
	"<liste> sortiert" oder
	"<liste> mit quick-sort sortiert"

[
	Eine Funktion, die die n. Fibonacci Nummer ausrechnet. Dies ist nur eine Annährung und weicht ab n = 40 vom korrekten Ergebnis ab.
	Zeitkomplexität: O(1)
]
Die Funktion Fibonacci_schnell mit dem Parameter n vom Typ Zahl, gibt eine Zahl zurück, macht:
	Gib ((phi hoch (n plus 1) plus phi) durch (phi hoch 2 plus 1)) als Zahl zurück.
Und kann so benutzt werden:
	"die <n>. Fibonacci Nummer"