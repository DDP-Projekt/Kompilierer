[ Zahlen Listen Funktionen]
[
	Löscht alle Zahlen aus der gegebenen Zahlen Liste.
]
Die öffentliche Funktion Leere_Zahl mit dem Parameter liste vom Typ Zahlen Listen Referenz, gibt nichts zurück, macht:
	Speichere eine leere Zahlen Liste in liste.
Und kann so benutzt werden:
	"Leere <liste>"

[Hilfsfunktion für Hinzufügen_X]
Die Funktion efficient_list_append_int mit den Parametern list, elem und elem_size vom Typ Zahlen Listen Referenz, Zahlen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append_int <list> <elem> <elem_size>"

[
	Fügt eine Zahl am Ende der gegeben Zahlen Liste hinzu.
]
Die öffentliche Funktion Hinzufügen_Zahl mit den Parametern liste und elm vom Typ Zahlen Listen Referenz und Zahl, gibt nichts zurück, macht:
	efficient_list_append_int liste elm (die Größe von einer Zahl).
Und kann so benutzt werden:
	"Füge <elm> an <liste> an",
	"füge <elm> an <liste> an"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_insert_int mit den Parametern list, index, elem und elem_size vom Typ Zahlen Listen Referenz, Zahl, Zahlen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_int <list> <index> <elem> <elem_size>"

[
	Fügt eine Zahl vor einem Index in der gegebenen Zahlen Liste ein.
	Es wird nicht überprüft ob der Index valide ist.
]
Die öffentliche Funktion Einfügen_Zahl mit den Parametern liste, index und elm vom Typ Zahlen Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	efficient_list_insert_int liste (index minus 1) elm (die Größe von einer Zahl).
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <liste>"

[Hilfsfunktion für Einfügen_Bereich_X]
Die Funktion efficient_list_insert_range_int mit den Parametern list, index, range und elem_size vom Typ Zahlen Listen Referenz, Zahl, Zahlen Listen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_range_int <list> <index> <range> <elem_size>"

[
	Fügt eine Zahlen Liste vor einem Index in der gegebenen Zahlen Liste ein.
]
Die öffentliche Funktion Einfügen_Bereich_Zahl mit den Parametern liste, index und range vom Typ Zahlen Listen Referenz, Zahl und Zahlen Liste, gibt nichts zurück, macht:
	efficient_list_insert_range_int liste (index minus 1) range (die Größe von einer Zahl).
Und kann so benutzt werden:
	"Setze die Elemente in <range> an die Stelle <index> von <liste>"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_prepend_int mit den Parametern liste, elem und elem_size vom Typ Zahlen Listen Referenz, Zahlen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend_int <liste> <elem> <elem_size>"

[
	Fügt eine Zahl am Anfang der gegeben Zahlen Liste hinzu.
]
Die öffentliche Funktion Voranstellen_Zahl mit den Parametern liste und elm vom Typ Zahlen Listen Referenz und Zahl, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	efficient_list_prepend_int liste elm (die Größe von einer Zahl).
Und kann so benutzt werden:
	"Stelle <elm> vor <liste>"

[Hilfsfunktion für Lösche_X und Lösche_Bereich_X]
Die Funktion efficient_list_delete_range_int mit den Parametern list, start, end und elem_size vom Typ Zahlen Listen Referenz, Zahl, Zahl und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_delete_range_int <list> <start> <end> <elem_size>"

[
	Entfernt die Zahl an dem gegeben Index aus der gegeben Zahlen Liste.
]
Die öffentliche Funktion Lösche_Element_Zahl mit den Parametern liste und index vom Typ Zahlen Listen Referenz und Zahl, gibt nichts zurück, macht:
	Speichere index minus 1 in index.
	efficient_list_delete_range_int liste index index (die Größe von einer Zahl).
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <liste>"

[
	Entfernt alle Zahlen aus der Liste im Bereich [start, end] (inklusiv)
]
Die öffentliche Funktion Lösche_Bereich_Zahl mit den Parametern liste, start und end vom Typ Zahlen Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	efficient_list_delete_range_int liste (start minus 1) (end minus 1) (die Größe von einer Zahl).
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <liste>"

[
	Füllt die gegebene Zahlen Liste mit der gegebenen Zahl.
]
Die öffentliche Funktion Füllen_Zahl mit den Parametern liste und elm vom Typ Zahlen Listen Referenz und Zahl, gibt nichts zurück, macht:
	Die Zahlen Liste neueListe ist die Länge von liste Mal elm.
	Speichere neueListe in liste.
Und kann so benutzt werden:
	"Fülle <liste> mit <elm>"

[
	Gibt den Index der gegebenen Zahl aus der Liste zurück oder -1 wenn die Zahl nicht in der Liste vorhanden ist.
]
Die öffentliche Funktion Index_Von_Zahl mit den Parametern liste und elm vom Typ Zahlen Liste und Zahl, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis (die Länge von liste), wenn liste an der Stelle i gleich elm ist, gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>"

[
	Gibt zurück ob die Zahl in der Liste vorhanden ist.
]
Die öffentliche Funktion Enthält_Zahl mit den Parametern liste und elm vom Typ Zahlen Liste und Zahl, gibt einen Wahrheitswert zurück, macht:
	Für jede Zahl z in liste, wenn z gleich elm ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob die Zahlen Liste leer ist.
]
Die öffentliche Funktion Ist_Leer_Zahl mit dem Parameter liste vom Typ Zahlen Liste, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn die Länge von liste gleich 0 ist zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche Funktion Erste_N_Elemente_Zahl mit den Parametern liste und n vom Typ Zahlen Liste und Zahl, gibt eine Zahlen Liste zurück, macht:
	Gib liste bis zum n. Element zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche Funktion Letzten_N_Elemente_Zahl mit den Parametern liste und n vom Typ Zahlen Liste und Zahl, gibt eine Zahlen Liste zurück, macht:
	Gib liste ab dem (die Länge von liste minus n plus 1). Element zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

Die öffentliche Funktion Spiegeln_Zahl mit dem Parameter liste vom Typ Zahlen Liste, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste neu ist die Länge von liste Mal 0.
	Für jede Zahl i von 1 bis (die Länge von liste), Speichere liste an der Stelle i in neu an der Stelle (die Länge von liste minus i plus 1).
	Gib neu zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[
	Berechnet die Summe aller Zahlen in der gegebenen Zahlen Liste.
	l := {e1, e2, e3, ..., en}
	f(l) = e1 + e2 + e3 + ... + en
]
Die öffentliche Funktion Summe_Zahlen_Liste mit dem Parameter liste vom Typ Zahlen Liste, gibt eine Zahl zurück, macht:
	Die Zahl summe ist 0.
	Für jede Zahl z in liste, erhöhe summe um z.
	Gib summe zurück.
Und kann so benutzt werden:
	"die Summe aller Zahlen in <liste>"

[
	Berechnet das Produkt aller Zahlen in der gegebenen Zahlen Liste.
	l := {e1, e2, e3, ..., en}
	f(l) = e1 * e2 * e3 * ... * en
	f({}) = 0
]
Die öffentliche Funktion Produkt_Zahlen_Liste mit dem Parameter liste vom Typ Zahlen Liste, gibt eine Zahl zurück, macht:
	Wenn die Länge von liste gleich 0 ist, gib 0 zurück.
	Die Zahl prod ist 1.
	Für jede Zahl z in liste, vervielfache prod um z.
	Gib prod zurück.
Und kann so benutzt werden:
	"das Produkt aller Zahlen in <liste>"

[
	Berechnet die Summe jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Summe_Zahl mit den Parametern l1 und l2 vom Typ Zahlen Liste und Zahlen Liste, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, erhöhe erg an der Stelle i um (l2 an der Stelle i).
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Zahl aus <l1> mit <l2> addiert"

[
	Berechnet die Differenz jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Differenz_Zahl mit den Parametern l1 und l2 vom Typ Zahlen Liste und Zahlen Liste, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, verringere erg an der Stelle i um (l2 an der Stelle i).
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Zahl aus <l1> mit <l2> subtrahiert"

[
	Berechnet das Produkt jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Produkt_Zahl mit den Parametern l1 und l2 vom Typ Zahlen Liste und Zahlen Liste, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, vervielfache erg an der Stelle i um (l2 an der Stelle i).
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Zahl aus <l1> mit <l2> multipliziert"

[
	Berechnet den Quotient jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Quotient_Zahl mit den Parametern l1 und l2 vom Typ Zahlen Liste und Zahlen Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste erg ist die Länge von l1 Mal 0,0.
	Für jede Zahl i von 1 bis die Länge von l1, speichere (l1 an der Stelle i) durch (l2 an der Stelle i) in erg an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Zahl aus <l1> mit <l2> dividiert"

[ Kommazahlen Listen Funktionen]
[
	Löscht alle Kommazahlen aus der gegebenen Kommazahlen Liste.
]
Die öffentliche Funktion Leere_Kommazahl mit dem Parameter liste vom Typ Kommazahlen Listen Referenz, gibt nichts zurück, macht:
	Speichere eine leere Kommazahlen Liste in liste.
Und kann so benutzt werden:
	"Leere <liste>"

[Hilfsfunktion für Hinzufügen_X]
Die Funktion efficient_list_append_float mit den Parametern list, elem und elem_size vom Typ Kommazahlen Listen Referenz, Kommazahlen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append_float <list> <elem> <elem_size>"

[
	Fügt eine Kommazahl am Ende der gegeben Kommazahlen Liste hinzu.
]
Die öffentliche Funktion Hinzufügen_Kommazahl mit den Parametern liste und elm vom Typ Kommazahlen Listen Referenz und Kommazahl, gibt nichts zurück, macht:
	efficient_list_append_float liste elm (die Größe von einer Kommazahl).
Und kann so benutzt werden:
	"Füge <elm> an <liste> an",
	"füge <elm> an <liste> an"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_insert_float mit den Parametern list, index, elem und elem_size vom Typ Kommazahlen Listen Referenz, Zahl, Kommazahlen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_float <list> <index> <elem> <elem_size>"

[
	Fügt eine Kommazahl vor einem Index in der gegebenen Kommazahlen Liste ein.
	Es wird nicht überprüft ob der Index valide ist.
]
Die öffentliche Funktion Einfügen_Kommazahl mit den Parametern liste, index und elm vom Typ Kommazahlen Listen Referenz, Zahl und Kommazahl, gibt nichts zurück, macht:
	efficient_list_insert_float liste (index minus 1) elm (die Größe von einer Kommazahl).
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <liste>"

[Hilfsfunktion für Einfügen_Bereich_X]
Die Funktion efficient_list_insert_range_float mit den Parametern list, index, range und elem_size vom Typ Kommazahlen Listen Referenz, Zahl, Kommazahlen Listen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_range_float <list> <index> <range> <elem_size>"

[
	Fügt eine Kommazahlen Liste vor einem Index in der gegebenen Kommazahlen Liste ein.
]
Die öffentliche Funktion Einfügen_Bereich_Kommazahl mit den Parametern liste, index und range vom Typ Kommazahlen Listen Referenz, Zahl und Kommazahlen Liste, gibt nichts zurück, macht:
	efficient_list_insert_range_float liste (index minus 1) range (die Größe von einer Kommazahl).
Und kann so benutzt werden:
	"Setze die Elemente in <range> an die Stelle <index> von <liste>"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_prepend_float mit den Parametern liste, elem und elem_size vom Typ Kommazahlen Listen Referenz, Kommazahlen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend_float <liste> <elem> <elem_size>"

[
	Fügt eine Kommazahl am Anfang der gegeben Kommazahlen Liste hinzu.
]
Die öffentliche Funktion Voranstellen_Kommazahl mit den Parametern liste und elm vom Typ Kommazahlen Listen Referenz und Kommazahl, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	efficient_list_prepend_float liste elm (die Größe von einer Kommazahl).
Und kann so benutzt werden:
	"Stelle <elm> vor <liste>"

[Hilfsfunktion für Lösche_X und Lösche_Bereich_X]
Die Funktion efficient_list_delete_range_float mit den Parametern list, start, end und elem_size vom Typ Kommazahlen Listen Referenz, Zahl, Zahl und Zahl, gibt nichts zurück,	
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_delete_range_float <list> <start> <end> <elem_size>"

[
	Entfernt die Kommazahl an dem gegeben Index aus der gegeben Kommazahlen Liste.
]
Die öffentliche Funktion Lösche_Element_Kommazahl mit den Parametern liste und index vom Typ Kommazahlen Listen Referenz und Zahl, gibt nichts zurück, macht:
	Speichere index minus 1 in index.
	efficient_list_delete_range_float liste index index (die Größe von einer Kommazahl).
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <liste>"

[
	Entfernt alle Kommazahlen aus der Liste im Bereich [start, end] (inklusiv)
]
Die öffentliche Funktion Lösche_Bereich_Kommazahl mit den Parametern liste, start und end vom Typ Kommazahlen Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	efficient_list_delete_range_float liste (start minus 1) (end minus 1) (die Größe von einer Kommazahl).
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <liste>"

[
	Füllt die gegebene Kommazahlen Liste mit der gegebenen Kommazahl.
]
Die öffentliche Funktion Füllen_Kommazahl mit den Parametern liste und elm vom Typ Kommazahlen Listen Referenz und Kommazahl, gibt nichts zurück, macht:
	Die Kommazahlen Liste neueListe ist die Länge von liste Mal elm.
	Speichere neueListe in liste.
Und kann so benutzt werden:
	"Fülle <liste> mit <elm>"

[
	Gibt den Index der gegebenen Kommazahl aus der Liste zurück oder -1 wenn die Kommazahl nicht in der Liste vorhanden ist.
]
Die öffentliche Funktion Index_Von_Kommazahl mit den Parametern liste und elm vom Typ Kommazahlen Liste und Kommazahl, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis (die Länge von liste), Wenn liste an der Stelle i gleich elm ist, Gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>"

[
	Gibt zurück ob die Kommazahl in der Liste vorhanden ist.
]
Die öffentliche Funktion Enthält_Kommazahl mit den Parametern liste und elm vom Typ Kommazahlen Liste und Kommazahl, gibt einen Wahrheitswert zurück, macht:
	Für jede Kommazahl z in liste, wenn z gleich elm ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob die Kommazahlen Liste leer ist.
]
Die öffentliche Funktion Ist_Leer_Kommazahl mit dem Parameter liste vom Typ Kommazahlen Liste, gibt einen Wahrheitswert zurück, macht:
	Gib [wahr wenn] die Länge von liste gleich 0 ist zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche Funktion Erste_N_Elemente_Kommazahl mit den Parametern liste und n vom Typ Kommazahlen Liste und Zahl, gibt eine Kommazahlen Liste zurück, macht:
	Gib liste bis zum n. Element zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche Funktion Letzten_N_Elemente_Kommazahl mit den Parametern liste und n vom Typ Kommazahlen Liste und Zahl, gibt eine Kommazahlen Liste zurück, macht:
	Gib liste ab dem (die Länge von liste minus n plus 1). Element zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

Die öffentliche Funktion Spiegeln_Kommazahl mit dem Parameter liste vom Typ Kommazahlen Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste neu ist die Länge von liste Mal 0,0.
	Für jede Zahl i von 1 bis (die Länge von liste), Speichere liste an der Stelle i in neu an der Stelle (die Länge von liste minus i plus 1).
	Gib neu zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[
	Berechnet die Summe aller Zahlen in der gegebenen Zahlen Liste.
	l := {e1, e2, e3, ..., en}
	f(l) = e1 + e2 + e3 + ... + en
]
Die öffentliche Funktion Summe_Kommazahlen_Liste mit dem Parameter liste vom Typ Kommazahlen Liste, gibt eine Kommazahl zurück, macht:
	Die Kommazahl summe ist 0,0.
	Für jede Kommazahl z in liste, erhöhe summe um z.
	Gib summe zurück.
Und kann so benutzt werden:
	"die Summe aller Kommazahlen in <liste>"

[
	Berechnet das Produkt aller Kommazahlen in der gegebenen Kommazahlen Liste.
	l := {e1, e2, e3, ..., en}
	f(l) = e1 * e2 * e3 * ... * en
	f({}) = 0,0
]
Die öffentliche Funktion Produkt_Kommazahlen_Liste mit dem Parameter liste vom Typ Kommazahlen Liste, gibt eine Kommazahl zurück, macht:
	Wenn die Länge von liste gleich 0 ist, gib 0,0 zurück.
	Die Kommazahl prod ist 1,0.
	Für jede Kommazahl z in liste, vervielfache prod um z.
	Gib prod zurück.
Und kann so benutzt werden:
	"das Produkt aller Kommazahlen in <liste>"

[
	Berechnet die Summe jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Summe_Kommazahl mit den Parametern l1 und l2 vom Typ Kommazahlen Liste und Kommazahlen Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, erhöhe erg an der Stelle i um (l2 an der Stelle i).
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Kommazahl aus <l1> mit <l2> addiert"

[
	Berechnet die Differenz jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Differenz_Kommazahl mit den Parametern l1 und l2 vom Typ Kommazahlen Liste und Kommazahlen Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, verringere erg an der Stelle i um (l2 an der Stelle i).
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Kommazahl aus <l1> mit <l2> subtrahiert"

[
	Berechnet das Produkt jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Produkt_Kommazahl mit den Parametern l1 und l2 vom Typ Kommazahlen Liste und Kommazahlen Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, vervielfache erg an der Stelle i um (l2 an der Stelle i).
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Kommazahl aus <l1> mit <l2> multipliziert"

[
	Berechnet den Quotient jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Quotient_Kommazahl mit den Parametern l1 und l2 vom Typ Kommazahlen Liste und Kommazahlen Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste erg ist die Länge von l1 Mal 0,0.
	Für jede Zahl i von 1 bis die Länge von l1, speichere erg an der Stelle i durch (l2 an der Stelle i) in erg an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jede Kommazahl aus <l1> mit <l2> dividiert"

[ Wahrheitswert Listen Funktionen ]
[
	Löscht alle Wahrheitswerts aus der gegebenen Wahrheitswert Liste.
]
Die öffentliche Funktion Leere_Wahrheitswert mit dem Parameter liste vom Typ Wahrheitswert Listen Referenz, gibt nichts zurück, macht:
	Speichere eine leere Wahrheitswert Liste in liste.
Und kann so benutzt werden:
	"Leere <liste>"

[Hilfsfunktion für Hinzufügen_X]
Die Funktion efficient_list_append_bool mit den Parametern list, elem und elem_size vom Typ Wahrheitswert Listen Referenz, Wahrheitswert Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append_bool <list> <elem> <elem_size>"

[
	Fügt einen Wahrheitswert am Ende der gegeben Wahrheitswert Liste hinzu.
]
Die öffentliche Funktion Hinzufügen_Wahrheitswert mit den Parametern liste und elm vom Typ Wahrheitswert Listen Referenz und Wahrheitswert, gibt nichts zurück, macht:
	efficient_list_append_bool liste elm (die Größe von einem Wahrheitswert).
Und kann so benutzt werden:
	"Füge <elm> an <liste> an",
	"füge <elm> an <liste> an"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_insert_bool mit den Parametern list, index, elem und elem_size vom Typ Wahrheitswert Listen Referenz, Zahl, Wahrheitswert Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_bool <list> <index> <elem> <elem_size>"

[
	Fügt einen Wahrheitswert vor einem Index in der gegebenen Wahrheitswert Liste ein.
]
Die öffentliche Funktion Einfügen_Wahrheitswert mit den Parametern liste, index und elm vom Typ Wahrheitswert Listen Referenz, Zahl und Wahrheitswert, gibt nichts zurück, macht:
	efficient_list_insert_bool liste (index minus 1) elm (die Größe von einem Wahrheitswert).
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <liste>"

[Hilfsfunktion für Einfügen_Bereich_X]
Die Funktion efficient_list_insert_range_bool mit den Parametern list, index, range und elem_size vom Typ Wahrheitswert Listen Referenz, Zahl, Wahrheitswert Listen Referenz und Zahl, gibt nichts zurück,	
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_range_bool <list> <index> <range> <elem_size>"

[
	Fügt eine Wahrheitswert Liste vor einem Index in der gegebenen Wahrheitswert Liste ein.
	Es wird nicht überprüft ob der Index valide ist.
]
Die öffentliche Funktion Einfügen_Bereich_Wahrheitswert mit den Parametern liste, index und range vom Typ Wahrheitswert Listen Referenz, Zahl und Wahrheitswert Liste, gibt nichts zurück, macht:
	efficient_list_insert_range_bool liste (index minus 1) range (die Größe von einem Wahrheitswert).
Und kann so benutzt werden:
	"Setze die Elemente in <range> an die Stelle <index> von <liste>"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_prepend_bool mit den Parametern liste, elem und elem_size vom Typ Wahrheitswert Listen Referenz, Wahrheitswert Referenz und Zahl, gibt nichts zurück,	
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend_bool <liste> <elem> <elem_size>"

[
	Fügt einen Wahrheitswert am Anfang der gegeben Wahrheitswert Liste hinzu.
]
Die öffentliche Funktion Voranstellen_Wahrheitswert mit den Parametern liste und elm vom Typ Wahrheitswert Listen Referenz und Wahrheitswert, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	efficient_list_prepend_bool liste elm (die Größe von einem Wahrheitswert).
Und kann so benutzt werden:
	"Stelle <elm> vor <liste>"

[Hilfsfunktion für Lösche_X und Lösche_Bereich_X]
Die Funktion efficient_list_delete_range_bool mit den Parametern list, start, end und elem_size vom Typ Wahrheitswert Listen Referenz, Zahl, Zahl und Zahl, gibt nichts zurück,		
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_delete_range_bool <list> <start> <end> <elem_size>"

[
	Entfernt den Wahrheitswert an dem gegeben Index aus der gegeben Wahrheitswert Liste.
]
Die öffentliche Funktion Lösche_Element_Wahrheitswert mit den Parametern liste und index vom Typ Wahrheitswert Listen Referenz und Zahl, gibt nichts zurück, macht:
	Speichere index minus 1 in index.
	efficient_list_delete_range_bool liste index index (die Größe von einem Wahrheitswert).
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <liste>"

[
	Entfernt alle Wahrheitswerts aus der Liste im Bereich [start, end] (inklusiv)
]
Die öffentliche Funktion Lösche_Bereich_Wahrheitswert mit den Parametern liste, start und end vom Typ Wahrheitswert Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	efficient_list_delete_range_bool liste (start minus 1) (end minus 1) (die Größe von einem Wahrheitswert).
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <liste>"

[
	Füllt die gegebene Kommazahlen Liste mit der gegebenen Kommazahl.
]
Die öffentliche Funktion Füllen_Wahrheitswert mit den Parametern liste und elm vom Typ Wahrheitswert Listen Referenz und Wahrheitswert, gibt nichts zurück, macht:
	Die Wahrheitswert Liste neueListe ist die Länge von liste Mal elm.
	Speichere neueListe in liste.
Und kann so benutzt werden:
	"Fülle <liste> mit <elm>"

[
	Gibt den Index des gegebenen Wahrheitswerts aus der Liste zurück oder -1 wenn der Wahrheitswert nicht in der Liste vorhanden ist.
]
Die öffentliche Funktion Index_Von_Wahrheitswert mit den Parametern liste und elm vom Typ Wahrheitswert Liste und Wahrheitswert, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis (die Länge von liste), Wenn liste an der Stelle i gleich elm ist, Gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>"

[
	Gibt zurück ob der Wahrheitswert in der Liste vorhanden ist.
]
Die öffentliche Funktion Enthält_Wahrheitswert mit den Parametern liste und elm vom Typ Wahrheitswert Liste und Wahrheitswert, gibt einen Wahrheitswert zurück, macht:
	Für jeden Wahrheitswert b in liste, wenn b gleich elm ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob die Wahrheitswert Liste leer ist.
]
Die öffentliche Funktion Ist_Leer_Wahrheitswert mit dem Parameter liste vom Typ Wahrheitswert Liste, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn die Länge von liste gleich 0 ist zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche Funktion Erste_N_Elemente_Wahrheitswert mit den Parametern liste und n vom Typ Wahrheitswert Liste und Zahl, gibt eine Wahrheitswert Liste zurück, macht:
	Gib liste bis zum n. Element zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche Funktion Letzten_N_Elemente_Wahrheitswert mit den Parametern liste und n vom Typ Wahrheitswert Liste und Zahl, gibt eine Wahrheitswert Liste zurück, macht:
	Gib liste ab dem (die Länge von liste minus n plus 1). Element zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

Die öffentliche Funktion Spiegeln_Wahrheitswert mit dem Parameter liste vom Typ Wahrheitswert Liste, gibt eine Wahrheitswert Liste zurück, macht:
	Die Wahrheitswert Liste neu ist die Länge von liste Mal falsch.
	Für jede Zahl i von 1 bis (die Länge von liste), Speichere liste an der Stelle i in neu an der Stelle (die Länge von liste minus i plus 1).
	Gib neu zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[ Buchstaben Listen Funktionen ]
[
	Löscht alle Buchstaben aus der gegebenen Buchstaben Liste.
]
Die öffentliche Funktion Leere_Buchstabe mit dem Parameter liste vom Typ Buchstaben Listen Referenz, gibt nichts zurück, macht:
	Speichere eine leere Buchstaben Liste in liste.
Und kann so benutzt werden:
	"Leere <liste>"

[Hilfsfunktion für Hinzufügen_X]
Die Funktion efficient_list_append_char mit den Parametern list, elem und elem_size vom Typ Buchstaben Listen Referenz, Buchstaben Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append_char <list> <elem> <elem_size>"

[
	Fügt einen Buchstaben am Ende der gegeben Buchstaben Liste hinzu.
]
Die öffentliche Funktion Hinzufügen_Buchstabe mit den Parametern liste und elm vom Typ Buchstaben Listen Referenz und Buchstabe, gibt nichts zurück, macht:
	efficient_list_append_char liste elm (die Größe von einem Buchstabe).
Und kann so benutzt werden:
	"Füge <elm> an <liste> an",
	"füge <elm> an <liste> an"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_insert_char mit den Parametern list, index, elem und elem_size vom Typ Buchstaben Listen Referenz, Zahl, Buchstaben Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_char <list> <index> <elem> <elem_size>"

[
	Fügt einen Buchstaben vor einem Index in der gegebenen Buchstaben Liste ein.
	Es wird nicht überprüft ob der Index valide ist.
]
Die öffentliche Funktion Einfügen_Buchstabe mit den Parametern liste, index und elm vom Typ Buchstaben Listen Referenz, Zahl und Buchstabe, gibt nichts zurück, macht:
	efficient_list_insert_char liste (index minus 1) elm (die Größe von einem Buchstabe).
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <liste>"

[Hilfsfunktion für Einfügen_Bereich_X]	
Die Funktion efficient_list_insert_range_char mit den Parametern list, index, range und elem_size vom Typ Buchstaben Listen Referenz, Zahl, Buchstaben Listen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_range_char <list> <index> <range> <elem_size>"

[
	Fügt eine Buchstaben Liste vor einem Index in der gegebenen Buchstaben Liste ein.
]
Die öffentliche Funktion Einfügen_Bereich_Buchstabe mit den Parametern liste, index und range vom Typ Buchstaben Listen Referenz, Zahl und Buchstaben Liste, gibt nichts zurück, macht:
	efficient_list_insert_range_char liste (index minus 1) range (die Größe von einem Buchstabe).
Und kann so benutzt werden:
	"Setze die Elemente in <range> an die Stelle <index> von <liste>"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_prepend_char mit den Parametern liste, elem und elem_size vom Typ Buchstaben Listen Referenz, Buchstaben Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend_char <liste> <elem> <elem_size>"

[
	Fügt einen Buchstaben am Anfang der gegeben Buchstaben Liste hinzu.
]
Die öffentliche Funktion Voranstellen_Buchstabe mit den Parametern liste und elm vom Typ Buchstaben Listen Referenz und Buchstabe, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	efficient_list_prepend_char liste elm (die Größe von einem Buchstabe).
Und kann so benutzt werden:
	"Stelle <elm> vor <liste>"

[Hilfsfunktion für Lösche_X und Lösche_Bereich_X]
Die Funktion efficient_list_delete_range_char mit den Parametern list, start, end und elem_size vom Typ Buchstaben Listen Referenz, Zahl, Zahl und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_delete_range_char <list> <start> <end> <elem_size>"

[
	Entfernt den Buchstaben an dem gegeben Index aus der gegeben Buchstaben Liste.
]
Die öffentliche Funktion Lösche_Element_Buchstabe mit den Parametern liste und index vom Typ Buchstaben Listen Referenz und Zahl, gibt nichts zurück, macht:
	Speichere index minus 1 in index.
	efficient_list_delete_range_char liste index index (die Größe von einem Buchstabe).
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <liste>"

[
	Entfernt alle Buchstaben aus der Liste im Bereich [start, end] (inklusiv)
]
Die öffentliche Funktion Lösche_Bereich_Buchstabe mit den Parametern liste, start und end vom Typ Buchstaben Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	efficient_list_delete_range_char liste (start minus 1) (end minus 1) (die Größe von einem Buchstabe).
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <liste>"

[
	Füllt die gegebene Buchstaben Liste mit dem gegebenen Buchstaben.
]
Die öffentliche Funktion Füllen_Buchstabe mit den Parametern liste und elm vom Typ Buchstaben Listen Referenz und Buchstabe, gibt nichts zurück, macht:
	Die Buchstaben Liste neueListe ist die Länge von liste Mal elm.
	Speichere neueListe in liste.
Und kann so benutzt werden:
	"Fülle <liste> mit <elm>"

[
	Gibt den Index des gegebenen Buchstabens aus der Liste zurück oder -1 wenn der Buchstabe nicht in der Liste vorhanden ist.
]
Die öffentliche Funktion Index_Von_Buchstabe mit den Parametern liste und elm vom Typ Buchstaben Liste und Buchstabe, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis (die Länge von liste), Wenn liste an der Stelle i gleich elm ist, Gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>"

[
	Gibt zurück ob der Buchstabe in der Liste vorhanden ist.
]
Die öffentliche Funktion Enthält_Buchstabe mit den Parametern liste und elm vom Typ Buchstaben Liste und Buchstabe, gibt einen Wahrheitswert zurück, macht:
	Für jeden Buchstaben b in liste, wenn b gleich elm ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob die Buchstaben Liste leer ist.
]
Die öffentliche Funktion Ist_Leer_Buchstabe mit dem Parameter liste vom Typ Buchstaben Liste, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn die Länge von liste gleich 0 ist zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche Funktion Erste_N_Elemente_Buchstabe mit den Parametern liste und n vom Typ Buchstaben Liste und Zahl, gibt eine Buchstaben Liste zurück, macht:
	Gib liste bis zum n. Element zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche Funktion Letzten_N_Elemente_Buchstabe mit den Parametern liste und n vom Typ Buchstaben Liste und Zahl, gibt eine Buchstaben Liste zurück, macht:
	Gib liste ab dem (die Länge von liste minus n plus 1). Element zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

Die öffentliche Funktion Spiegeln_Buchstabe mit dem Parameter liste vom Typ Buchstaben Liste, gibt eine Buchstaben Liste zurück, macht:
	Die Buchstaben Liste neu ist die Länge von liste Mal ' '.
	Für jede Zahl i von 1 bis (die Länge von liste), Speichere liste an der Stelle i in neu an der Stelle (die Länge von liste minus i plus 1).
	Gib neu zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[
	Verkettet alle Buchstaben der gegebenen Liste zu einem Text und gibt diesen zurück.
]
Die öffentliche Funktion Aneinandergehängt_Buchstabe mit dem Parameter liste vom Typ Buchstaben Liste, gibt einen Text zurück, macht:
	Der Text t ist "".
	Für jeden Buchstabe b in liste, speichere t verkettet mit b in t.
	Gib t zurück.
Und kann so benutzt werden:
	"<liste> aneinandergehängt"

[ Text Listen Funktionen ]
[
	Löscht alle Texte aus der gegebenen Text Liste.
]
Die öffentliche Funktion Leere_Text mit dem Parameter liste vom Typ Text Listen Referenz, gibt nichts zurück, macht:
	Speichere eine leere Text Liste in liste.
Und kann so benutzt werden:
	"Leere <liste>"

[Hilfsfunktion für Hinzufügen_X]
Die Funktion efficient_list_append_string mit den Parametern list, elem und elem_size vom Typ Text Listen Referenz, Text Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append_string <list> <elem> <elem_size>"

[
	Fügt einen Text am Ende der gegeben Text Liste hinzu.
]
Die öffentliche Funktion Hinzufügen_Text mit den Parametern liste und elm vom Typ Text Listen Referenz und Text, gibt nichts zurück, macht:
	efficient_list_append_string liste elm (die Größe von einem Text).
Und kann so benutzt werden:
	"Füge <elm> an <liste> an",
	"füge <elm> an <liste> an"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_insert_string mit den Parametern list, index, elem und elem_size vom Typ Text Listen Referenz, Zahl, Text Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_string <list> <index> <elem> <elem_size>"

[
	Fügt einen Text vor einem Index in der gegebenen Text Liste ein.
]
Die öffentliche Funktion Einfügen_Text mit den Parametern liste, index und elm vom Typ Text Listen Referenz, Zahl und Text, gibt nichts zurück, macht:
	efficient_list_insert_string liste (index minus 1) elm (die Größe von einem Text).
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <liste>"

[Hilfsfunktion für Einfügen_Bereich_X]
Die Funktion efficient_list_insert_range_string mit den Parametern list, index, range und elem_size vom Typ Text Listen Referenz, Zahl, Text Listen Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_range_string <list> <index> <range> <elem_size>"

[
	Fügt eine Text Liste vor einem Index in der gegebenen Text Liste ein.
	Es wird nicht überprüft ob der Index valide ist.
]
Die öffentliche Funktion Einfügen_Bereich_Text mit den Parametern liste, index und range vom Typ Text Listen Referenz, Zahl und Text Liste, gibt nichts zurück, macht:
	efficient_list_insert_range_string liste (index minus 1) range (die Größe von einem Text).
Und kann so benutzt werden:
	"Setze die Elemente in <range> an die Stelle <index> von <liste>"

[Hilfsfunktion für EinfügenX]
Die Funktion efficient_list_prepend_string mit den Parametern liste, elem und elem_size vom Typ Text Listen Referenz, Text Referenz und Zahl, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend_string <liste> <elem> <elem_size>"

[
	Fügt einen Text am Anfang der gegeben Text Liste hinzu.
]
Die öffentliche Funktion Voranstellen_Text mit den Parametern liste und elm vom Typ Text Listen Referenz und Text, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	efficient_list_prepend_string liste elm (die Größe von einem Text).
Und kann so benutzt werden:
	"Stelle <elm> vor <liste>"

[Hilfsfunktion für Lösche_X und Lösche_Bereich_X]
Die Funktion efficient_list_delete_range_string mit den Parametern list, start, end und elem_size vom Typ Text Listen Referenz, Zahl, Zahl und Zahl, gibt nichts zurück,	
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_delete_range_string <list> <start> <end> <elem_size>"

[
	Entfernt den Text an dem gegeben Index aus der gegeben Text Liste.
]
Die öffentliche Funktion Lösche_Element_Text mit den Parametern liste und index vom Typ Text Listen Referenz und Zahl, gibt nichts zurück, macht:
	Speichere index minus 1 in index.
	efficient_list_delete_range_string liste index index (die Größe von einem Text).
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <liste>"

[
	Entfernt alle Texte aus der Liste im Bereich [start, end] (inklusiv)
]
Die öffentliche Funktion Lösche_Bereich_Text mit den Parametern liste, start und end vom Typ Text Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	efficient_list_delete_range_string liste (start minus 1) (end minus 1) (die Größe von einem Text).
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <liste>"

[
	Füllt die gegebene Text Liste mit dem gegebenen Text.
]
Die öffentliche Funktion Füllen_Text mit den Parametern liste und elm vom Typ Text Listen Referenz und Text, gibt nichts zurück, macht:
	Die Text Liste neueListe ist die Länge von liste Mal elm.
	Speichere neueListe in liste.
Und kann so benutzt werden:
	"Fülle <liste> mit <elm>"

[
	Gibt den Index des gegebenen Textes aus der Liste zurück oder -1 wenn der Text nicht in der Liste vorhanden ist.
]
Die öffentliche Funktion Index_Von_Text mit den Parametern liste und elm vom Typ Text Liste und Text, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis (die Länge von liste), Wenn liste an der Stelle i gleich elm ist, Gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>"

[
	Gibt zurück ob der Text in der Liste vorhanden ist.
]
Die öffentliche Funktion Enthält_Text mit den Parametern liste und elm vom Typ Text Liste und Text, gibt einen Wahrheitswert zurück, macht:
	Für jeden Text t in liste, wenn t gleich elm ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob die Text Liste leer ist.
]
Die öffentliche Funktion Ist_Leer_Text mit dem Parameter liste vom Typ Text Liste, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn die Länge von liste gleich 0 ist zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche Funktion Erste_N_Elemente_Text mit den Parametern liste und n vom Typ Text Liste und Zahl, gibt eine Text Liste zurück, macht:
	Gib liste bis zum n. Element zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche Funktion Letzten_N_Elemente_Text mit den Parametern liste und n vom Typ Text Liste und Zahl, gibt eine Text Liste zurück, macht:
	Gib liste ab dem (die Länge von liste minus n plus 1). Element zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

Die öffentliche Funktion Spiegeln_Text mit dem Parameter liste vom Typ Text Liste, gibt eine Text Liste zurück, macht:
	Die Text Liste neu ist die Länge von liste Mal "".
	Für jede Zahl i von 1 bis (die Länge von liste), Speichere liste an der Stelle i in neu an der Stelle (die Länge von liste minus i plus 1).
	Gib neu zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[
	Verkettet alle Texte in der gegebenen Text liste.
]
Die öffentliche Funktion Verketten_Text_Liste mit dem Parameter liste vom Typ Text Liste, gibt einen Text zurück, macht:
	Der Text text ist "".
	Für jeden Text t in liste, speichere text verkettet mit t in text.
	Gib text zurück.
Und kann so benutzt werden:
	"alle Texte in <liste> aneinandergehängt"

[
	Verkettet jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Verketten_Text mit den Parametern l1 und l2 vom Typ Text Liste und Text Liste, gibt eine Text Liste zurück, macht:
	Die Text Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, speichere (l1 an der Stelle i) verkettet mit (l2 an der Stelle i) in erg an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jeden Text aus <l1> mit <l2> verkettet"

[
	Gibt eine Zahlen Liste aus aufsteigenden Zahlen von start bis end (beide inklusiv) zurück.
	z.B.:
		f(1, 10) = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
		f(5, 5) = {5}
		f(-10, 10) = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
]
Die öffentliche Funktion Aufsteigende_Zahlen mit den Parametern start und ende vom Typ Zahl und Zahl, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste l ist ende minus start plus 1 Mal 0.
	Für jede Zahl i von 0 bis ende minus start, mache:
		Speichere start plus i in l an der Stelle (i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine aufsteigende Zahlen Liste von <start> bis <ende>"

[
	Gibt eine Zahlen Liste aus absteigenden Zahlen von start bis end (beide inklusiv) zurück.
	z.B.:
		f(0, 0) = {0}
		f(10, 1) = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
		f(-10, 10) = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
]
Die öffentliche Funktion Absteigende_Zahlen mit den Parametern start und ende vom Typ Zahl und Zahl, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste l ist start minus ende plus 1 Mal 0.
	Für jede Zahl i von start bis ende mit Schrittgröße -1, mache:
		Speichere i in l an der Stelle (start minus i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine absteigende Zahlen Liste von <start> bis <ende>"

[
	Gibt eine <anzahl> lange Kommazahlen Liste aus gleich verteilten Kommazahlen von <start> bis <ende> (beide inklusiv) zurück.
	Anzahl muss mindestens 2 sein, sonst wird {NaN} zurückgegeben.
	z.B.:
		f(1, 10, 2) = {1, 3, 5, 7, 9}
		f(5, 5, 1) = {5}
		f(-10, 10, 1) = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
]
Die öffentliche Funktion Linspace mit den Parametern start, ende und anzahl vom Typ Kommazahl, Kommazahl und Zahl, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste l ist anzahl Mal 0,0.
	Für jede Zahl i von 0 bis anzahl minus 1, mache:
		Speichere start plus (ende minus start) mal (i durch (anzahl minus 1)) in l an der Stelle (i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine lineare Kommazahlen Liste von <start> bis <ende> mit <anzahl> Elementen"

[
	Gibt eine <anzahl> lange Kommazahlen Liste aus gleich verteilten Kommazahlen von start bis end (beide inklusiv) auf einer Logarithmischen Skala.
	Anzahl muss mindestens 2 sein, sonst wird {NaN} zurückgegeben.
	z.B.:
		f(1,0, 5,0, 5) = {10, 100, 1000, 10000, 100000}
]
Die öffentliche Funktion Logspace mit den Parametern start, ende und anzahl vom Typ Kommazahl, Kommazahl und Zahl, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste l ist anzahl Mal 0,0.
	Für jede Zahl i von 0 bis anzahl minus 1, mache:
		Speichere 10 hoch (start plus (ende minus start) mal (i durch (anzahl minus 1))) in l an der Stelle (i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine logarithmische Kommazahlen Liste von <start> bis <ende> mit <anzahl> Elementen"
