[ Zahlen Listen Funktionen]

[
	Löscht alle Zahlen aus der gegebenen Zahlen Liste.
]
Die öffentliche generische Funktion Leere_Liste mit dem Parameter liste vom Typ T Listen Referenz, gibt nichts zurück, macht:
	Speichere eine leere T Liste in liste.
Und kann so benutzt werden:
	"Leere <liste>"

[Hilfsfunktion für Hinzufügen_X]
Die generische Funktion efficient_list_append mit den Parametern list, elem und v vom Typ T Listen Referenz, T Referenz und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append <list> <elem> <v>"

[Hilfsfunktion für Hinzufügen_X]
Die generische Funktion efficient_list_append_list mit den Parametern list, other und v vom Typ T Listen Referenz, T Listen Referenz und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_append_list <list> <other> <v>"

[
	Fügt ein Element ans Ende der gegeben Liste an.
]
Die öffentliche generische Funktion Hinzufügen_Liste mit den Parametern liste und elm vom Typ T Listen Referenz und T, gibt nichts zurück, macht:
	Die Variable v ist der Standardwert von einem T.
	efficient_list_append liste elm v.
Und kann so benutzt werden:
	"Füge <elm> an <liste> an",
	"füge <elm> an <liste> an"

[
	Fügt eine Liste ans Ende der gegeben Liste an.
]
Die öffentliche generische Funktion Hinzufügen_Liste_Liste mit den Parametern liste und other vom Typ T Listen Referenz und T Liste, gibt nichts zurück, macht:
	Die Variable v ist der Standardwert von einem T.
	efficient_list_append_list liste other v.
Und kann so benutzt werden:
	"Füge <other> an <liste> an",
	"füge <other> an <liste> an"

Die generische Funktion efficient_list_insert mit den Parametern list, index, elem und v vom Typ T Listen Referenz, Zahl, T Referenz und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert <list> <index> <elem> <v>"

[
	Fügt ein Element vor einem Index in der gegebenen Liste ein.
	Ist der Index invalide wird ein Laufzeitfehler ausgelöst
]
Die öffentliche generische Funktion Einfügen_Liste mit den Parametern liste, index und elm vom Typ T Listen Referenz, Zahl und T, gibt nichts zurück, macht:
	Die Variable v ist der Standardwert von einem T.
	efficient_list_insert liste (index minus 1) elm v.
Und kann so benutzt werden:
	"Setze <elm> an die Stelle <index> von <liste>"

Die generische Funktion efficient_list_insert_range mit den Parametern list, index, range und v vom Typ T Listen Referenz, Zahl, T Listen Referenz und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_insert_range <list> <index> <range> <v>"

[
	Fügt eine Liste vor einem Index in der gegebenen Liste ein.
	Ist der Index invalide wird ein Laufzeitfehler ausgelöst
]
Die öffentliche generische Funktion Einfügen_Bereich_Liste mit den Parametern liste, index und range vom Typ T Listen Referenz, Zahl und T Liste, gibt nichts zurück, macht:
	Die Variable v ist der Standardwert von einem T.
	efficient_list_insert_range liste (index minus 1) range v.
Und kann so benutzt werden:
	"Setze die Elemente in <range> an die Stelle <index> von <liste>"

Die generische Funktion efficient_list_prepend mit den Parametern liste, elem und v vom Typ T Listen Referenz, T Referenz und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend <liste> <elem> <v>"

Die generische Funktion efficient_list_prepend_list mit den Parametern liste, other und v vom Typ T Listen Referenz, T Listen Referenz und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_prepend_list <liste> <other> <v>"

[
	Fügt ein Element an Anfang der gegeben Liste an.
	Ist der Index invalide wird ein Laufzeitfehler ausgelöst
]
Die öffentliche generische Funktion Voranstellen_Liste mit den Parametern liste und elm vom Typ T Listen Referenz und T, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	Die Variable v ist der Standardwert von einem T.
	efficient_list_prepend liste elm v.
Und kann so benutzt werden:
	"Stelle <elm> vor <liste>"

[
	Fügt eine Liste an Anfang der gegeben Liste an.
	Ist der Index invalide wird ein Laufzeitfehler ausgelöst
]
Die öffentliche generische Funktion Voranstellen_Liste_Liste mit den Parametern liste und other vom Typ T Listen Referenz und T Liste, gibt nichts zurück, macht:
	[Speichere elm verkettet mit liste in liste.]
	Die Variable v ist der Standardwert von einem T.
	efficient_list_prepend_list liste other v.
Und kann so benutzt werden:
	"Stelle <other> vor <liste>"

Die generische Funktion efficient_list_delete_range mit den Parametern list, start, end und v vom Typ T Listen Referenz, Zahl, Zahl und Variablen Referenz, gibt nichts zurück,
ist in "libddpstdlib.a" definiert
Und kann so benutzt werden:
	"efficient_list_delete_range <list> <start> <end> <v>"

[
	Entfernt das Element an dem gegeben Index aus der gegeben Liste.
	Ist der Index invalide wird ein Laufzeitfehler ausgelöst
]
Die  öffentliche generische Funktion Lösche_Element mit den Parametern liste und index vom Typ T Listen Referenz und Zahl, gibt nichts zurück, macht:
	Speichere index minus 1 in index.
	Die Variable v ist der Standardwert von einem T.
	efficient_list_delete_range liste index index v.
Und kann so benutzt werden:
	"Lösche das Element an der Stelle <index> aus <liste>"

[
	Entfernt alle Elemente aus der Liste im Bereich [start, end] (inklusiv)
	Ist der Index invalide wird ein Laufzeitfehler ausgelöst
]
Die öffentliche generische Funktion Lösche_Bereich mit den Parametern liste, start und end vom Typ T Listen Referenz, Zahl und Zahl, gibt nichts zurück, macht:
	Die Variable v ist der Standardwert von einem T.
	efficient_list_delete_range liste (start minus 1) (end minus 1) v.
Und kann so benutzt werden:
	"Lösche alle Elemente von <start> bis <end> aus <liste>"

[
	Füllt die gegebene Liste mit dem gegebenen Wert.
]
Die öffentliche generische Funktion Füllen_Liste mit den Parametern liste und elm vom Typ T Listen Referenz und T, gibt nichts zurück, macht:
	Für jede Zahl i von 1 bis die Länge von liste, speichere elm in liste an der Stelle i.
Und kann so benutzt werden:
	"Fülle <liste> mit <elm>"

[
	Gibt den Index des gegebenen Wertes aus der Liste zurück oder -1 wenn der Wert nicht in der Liste vorhanden ist.
]
Die öffentliche generische Funktion Index_Von_Element_Ref mit den Parametern liste und elm vom Typ T Listen Referenz und T, gibt eine Zahl zurück, macht:
	Für jede Zahl i von 1 bis die Länge von liste, wenn liste an der Stelle i gleich elm ist, gib i zurück.
	Gib -1 zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>",
	"den Index von <elm> in <liste>",
	"dem Index von <elm> in <liste>"

[
	Gibt den Index der gegebenen Zahl aus der Liste zurück oder -1 wenn die Zahl nicht in der Liste vorhanden ist.
]
Die öffentliche generische Funktion Index_Von_Element mit den Parametern liste und elm vom Typ T Liste und T, gibt eine Zahl zurück, macht:
	Gib den Index von elm in liste zurück.
Und kann so benutzt werden:
	"der Index von <elm> in <liste>",
	"den Index von <elm> in <liste>",
	"dem Index von <elm> in <liste>"
[
	Gibt zurück ob der Wert in der Liste vorhanden ist.
]
Die öffentliche generische Funktion Enthält_Wert_Ref mit den Parametern liste und elm vom Typ T Listen Referenz und T, gibt einen Wahrheitswert zurück, macht:
	Für jedes T e in liste, wenn e gleich elm ist, gib wahr zurück.
	Gib falsch zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob der Wert in der Liste vorhanden ist.
]
Die öffentliche generische Funktion Enthält_Wert mit den Parametern liste und elm vom Typ T Liste und T, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn liste elm enthält, zurück.
Und kann so benutzt werden:
	"<liste> <elm> <!nicht> enthält"

[
	Gibt zurück ob die Liste leer ist.
]
Die öffentliche generische Funktion Ist_Leer_Liste_Ref mit dem Parameter liste vom Typ T Listen Referenz, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn die Länge von liste gleich 0 ist, zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist",
	"<liste> <!nicht> leer sind"

[
	Gibt zurück ob die Liste leer ist.
]
Die öffentliche generische Funktion Ist_Leer_Liste mit dem Parameter liste vom Typ T Liste, gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn liste leer ist, zurück.
Und kann so benutzt werden:
	"<liste> <!nicht> leer ist",
	"<liste> <!nicht> leer sind"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche generische Funktion Erste_N_Elemente_Liste_Ref mit den Parametern liste und n vom Typ T Listen Referenz und Zahl, gibt eine T Liste zurück, macht:
	Gib liste bis zum n. Element zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste bis zum n. Element zurück.
]
Die öffentliche generische Funktion Erste_N_Elemente_Liste mit den Parametern liste und n vom Typ T Liste und Zahl, gibt eine T Liste zurück, macht:
	Gib die ersten n Elemente von liste zurück.
Und kann so benutzt werden:
	"die ersten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche generische Funktion Letzten_N_Elemente_Liste_Ref mit den Parametern liste und n vom Typ T Listen Referenz und Zahl, gibt eine T Liste zurück, macht:
	Gib liste ab dem (die Länge von liste minus n plus 1). Element zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

[
	Gibt liste ab dem (die Länge von liste minus n). Element zurück.
]
Die öffentliche generische Funktion Letzten_N_Elemente_Liste mit den Parametern liste und n vom Typ T Liste und Zahl, gibt eine T Liste zurück, macht:
	Gib die letzten n Elemente von liste zurück.
Und kann so benutzt werden:
	"die letzten <n> Elemente von <liste>"

[
	Gibt die Liste gespiegelt zurück.
]
Die öffentliche generische Funktion Liste_Spiegeln_Ref mit dem Parameter liste vom Typ T Listen Referenz, gibt eine T Liste zurück, macht:
	Die T Liste neu ist die Länge von liste Mal der Standardwert von einem T.
	Für jede Zahl i von 1 bis die Länge von liste, Speichere liste an der Stelle i in neu an der Stelle (die Länge von liste minus i plus 1).
	Gib neu zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[
	Gibt die Liste gespiegelt zurück.
]
Die öffentliche generische Funktion Liste_Spiegeln mit dem Parameter liste vom Typ T Liste, gibt eine T Liste zurück, macht:
	Gib liste gespiegelt zurück.
Und kann so benutzt werden:
	"<liste> gespiegelt"

[
	Berechnet die Summe aller Elemente in der gegebenen Liste.
	l := {e1, e2, e3, ..., en}
	f(l) = e1 + e2 + e3 + ... + en
]
Die öffentliche generische Funktion Summe_Liste mit dem Parameter liste vom Typ T Liste, gibt ein T zurück, macht:
	Das T summe ist der Standardwert von einem T.
	Für jedes T e in liste, erhöhe summe um e.
	Gib summe zurück.
Und kann so benutzt werden:
	"die Summe aller Elemente in <liste>",
	"die Summe aller Zahlen in <liste>",
	"die Summe aller Kommazahlen in <liste>"

[
	Berechnet das Produkt aller Elemente in der gegebenen  Liste.
	l := {e1, e2, e3, ..., en}
	f(l) = e1 * e2 * e3 * ... * en
	f({}) = 0
]
Die öffentliche generische Funktion Produkt_Liste mit dem Parameter liste vom Typ T Liste, gibt ein T zurück, macht:
	Wenn die Länge von liste gleich 0 ist, gib 0 als T zurück.
	Das T prod ist 1 als T.
	Für jedes T e in liste, vervielfache prod um e.
	Gib prod zurück.
Und kann so benutzt werden:
	"das Produkt aller Elemente in <liste>",
	"das Produkt aller Zahlen in <liste>",
	"das Produkt aller Kommazahlen in <liste>"

[
	Berechnet die Summe jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche generische Funktion Elementweise_Summe mit den Parametern l1 und l2 vom Typ T Liste und T Liste, gibt eine T Liste zurück, macht:
	Die T Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, erhöhe erg an der Stelle i um l2 an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jedes Element aus <l1> mit <l2> addiert",
	"jede Zahl aus <l1> mit <l2> addiert",
	"jede Kommazahl aus <l1> mit <l2> addiert"

[
	Berechnet die Differenz jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche generische Funktion Elementweise_Differenz mit den Parametern l1 und l2 vom Typ T Liste und T Liste, gibt eine T Liste zurück, macht:
	Die T Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, verringere erg an der Stelle i um l2 an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jedes Element aus <l1> mit <l2> subtrahiert",
	"jede Zahl aus <l1> mit <l2> subtrahiert",
	"jede Kommazahl aus <l1> mit <l2> subtrahiert"

[
	Berechnet das Produkt jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche generische Funktion Elementweise_Produkt mit den Parametern l1 und l2 vom Typ T Liste und T Liste, gibt eine T Liste zurück, macht:
	Die T Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, vervielfache erg an der Stelle i um l2 an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jedes Element aus <l1> mit <l2> multipliziert",
	"jede Zahl aus <l1> mit <l2> multipliziert",
	"jede Kommazahl aus <l1> mit <l2> multipliziert"

[
	Berechnet den Quotient jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche generische Funktion Elementweise_Quotient mit den Parametern l1 und l2 vom Typ T Liste und T Liste, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste erg ist die Länge von l1 Mal 0,0.
	Für jede Zahl i von 1 bis die Länge von l1, speichere l1 an der Stelle i durch l2 an der Stelle i in erg an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jedes Element aus <l1> mit <l2> dividiert",
	"jede Zahl aus <l1> mit <l2> dividiert",
	"jede Kommazahl aus <l1> mit <l2> dividiert"

[ Buchstaben Listen Funktionen]

[
	Verkettet alle Buchstaben der gegebenen Liste zu einem Text und gibt diesen zurück.
]
Die öffentliche Funktion Aneinandergehaengt_Buchstabe_Ref mit dem Parameter liste vom Typ Buchstaben Listen Referenz, gibt einen Text zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"<liste> aneinandergehängt"

[
	Verkettet alle Buchstaben der gegebenen Liste zu einem Text und gibt diesen zurück.
]
Die öffentliche Funktion Aneinandergehängt_Buchstabe mit dem Parameter liste vom Typ Buchstaben Liste, gibt einen Text zurück, macht:
	Gib liste aneinandergehängt zurück.
Und kann so benutzt werden:
	"<liste> aneinandergehängt"

[ Text Listen Funktionen ]

[
	Verkettet alle Texte in der gegebenen Text liste.
]
Die öffentliche Funktion Verketten_Text_Liste_Ref mit dem Parameter liste vom Typ Text Listen Referenz, gibt einen Text zurück, macht:
	Der Text text ist "".
	Für jeden Text t in liste, speichere text verkettet mit t in text.
	Gib text zurück.
Und kann so benutzt werden:
	"alle Texte in <liste> aneinandergehängt"

[
	Verkettet alle Texte in der gegebenen Text liste.
]	
Die öffentliche Funktion Verketten_Text_Liste mit dem Parameter liste vom Typ Text Liste, gibt einen Text zurück, macht:
	Gib alle Texte in liste aneinandergehängt zurück.
Und kann so benutzt werden:
	"alle Texte in <liste> aneinandergehängt"

[
	Verkettet jedes Element aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Verketten_Text_Ref mit den Parametern l1 und l2 vom Typ Text Listen Referenz und Text Listen Referenz, gibt eine Text Liste zurück, macht:
	Die Text Liste erg ist l1.
	Für jede Zahl i von 1 bis die Länge von l1, speichere l1 an der Stelle i verkettet mit l2 an der Stelle i in erg an der Stelle i.
	Gib erg zurück.
Und kann so benutzt werden:
	"jeden Text aus <l1> mit <l2> verkettet"

[
	Verkettet jedes Elements aus l1 mit l2.
	Beide Listen müssen gleich lang sein.
]
Die öffentliche Funktion Elementweise_Verketten_Text mit den Parametern l1 und l2 vom Typ Text Liste und Text Liste, gibt eine Text Liste zurück, macht:
	Gib jeden Text aus l1 mit l2 verkettet zurück.
Und kann so benutzt werden:
	"jeden Text aus <l1> mit <l2> verkettet"

[
	Gibt eine Zahlen Liste aus aufsteigenden Zahlen von start bis end (beide inklusiv) zurück.
	z.B.:
		f(1, 10) = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
		f(5, 5) = {5}
		f(-10, 10) = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
]
Die öffentliche Funktion Aufsteigende_Zahlen mit den Parametern start und ende vom Typ Zahl und Zahl, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste l ist ende minus start plus 1 Mal 0.
	Für jede Zahl i von 0 bis ende minus start, mache:
		Speichere start plus i in l an der Stelle (i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine aufsteigende Zahlen Liste von <start> bis <ende>"

[
	Gibt eine Zahlen Liste aus absteigenden Zahlen von start bis end (beide inklusiv) zurück.
	z.B.:
		f(0, 0) = {0}
		f(10, 1) = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
		f(-10, 10) = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
]
Die öffentliche Funktion Absteigende_Zahlen mit den Parametern start und ende vom Typ Zahl und Zahl, gibt eine Zahlen Liste zurück, macht:
	Die Zahlen Liste l ist start minus ende plus 1 Mal 0.
	Für jede Zahl i von start bis ende mit Schrittgröße -1, mache:
		Speichere i in l an der Stelle (start minus i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine absteigende Zahlen Liste von <start> bis <ende>"

[
	Gibt eine <anzahl> lange Kommazahlen Liste aus gleich verteilten Kommazahlen von <start> bis <ende> (beide inklusiv) zurück.
	Anzahl muss mindestens 2 sein, sonst wird {NaN} zurückgegeben.
	z.B.:
		f(1, 10, 2) = {1, 3, 5, 7, 9}
		f(5, 5, 1) = {5}
		f(-10, 10, 1) = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0 , 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
]
Die öffentliche Funktion Linspace mit den Parametern start, ende und anzahl vom Typ Kommazahl, Kommazahl und Zahl, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste l ist anzahl Mal 0,0.
	Für jede Zahl i von 0 bis anzahl minus 1, mache:
		Speichere start plus (ende minus start) mal (i durch (anzahl minus 1)) in l an der Stelle (i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine lineare Kommazahlen Liste von <start> bis <ende> mit <anzahl> Elementen"

[
	Gibt eine <anzahl> lange Kommazahlen Liste aus gleich verteilten Kommazahlen von start bis end (beide inklusiv) auf einer Logarithmischen Skala.
	Anzahl muss mindestens 2 sein, sonst wird {NaN} zurückgegeben.
	z.B.:
		f(1,0, 5,0, 5) = {10, 100, 1000, 10000, 100000}
]
Die öffentliche Funktion Logspace mit den Parametern start, ende und anzahl vom Typ Kommazahl, Kommazahl und Zahl, gibt eine Kommazahlen Liste zurück, macht:
	Die Kommazahlen Liste l ist anzahl Mal 0,0.
	Für jede Zahl i von 0 bis anzahl minus 1, mache:
		Speichere 10 hoch (start plus (ende minus start) mal (i durch (anzahl minus 1))) in l an der Stelle (i plus 1).
	Gib l zurück.
Und kann so benutzt werden:
	"eine logarithmische Kommazahlen Liste von <start> bis <ende> mit <anzahl> Elementen"
