Binde "Duden/Texte" ein.

Der Boolean __war_eof ist falsch.

Die Funktion War_EOF gibt einen Boolean zurück, macht:
	Gib __war_eof zurück.
Und kann so benutzt werden:
	"die Benutzereingabe zu Ende gewesen"

Die Funktion Ist_Nicht_EOF gibt einen Boolean zurück, macht:
	Gib nicht __war_eof zurück.
Und kann so benutzt werden:
	"die Benutzereingabe nicht vorbei"

Die Funktion __Extern_Lies_Buchstabe mit dem Parameter __war_eof vom Typ Boolean Referenz, gibt einen Buchstaben zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"__nächstes_Zeichen <__war_eof>"

Die Funktion Lies_Buchstabe gibt einen Buchstaben zurück, macht:
	Gib __nächstes_Zeichen __war_eof zurück.
Und kann so benutzt werden:
	"das nächste Zeichen" oder
	"das naechste Zeichen"

Die Funktion Lies_Token gibt einen Text zurück, macht:
	[vorangehende Leerstellen überspringen]
	Der Buchstabe b ist das nächste Zeichen.
	Solange b ein Leerzeichen oder b ein Kontrollzeichen ist, mache:
		Wenn die Benutzereingabe zu Ende gewesen ist, gib "" zurück.
		Speichere das nächste Zeichen in b.

	[Text bis Leerstelle Lesen]
	Der Text token ist "".
	Solange nicht (b ein Leerzeichen oder b ein Kontrollzeichen) ist, mache:
		Speichere token verkettet mit b in token.
		Speichere das nächste Zeichen in b.

	Gib token zurück.
Und kann so benutzt werden:
	"die nächste Eingabe" oder
	"die naechste Eingabe"

Die Funktion Lies_Zeile gibt einen Text zurück, macht:
	Der Text zeile ist "".
	Der Buchstabe b ist das nächste Zeichen.
	Solange b ungleich '\n' und die Benutzereingabe nicht vorbei ist, mache:
		Speichere zeile verkettet mit b in zeile.
		Speichere das nächste Zeichen in b.

	Gib zeile zurück.
Und kann so benutzt werden:
	"die nächste Zeile" oder
	"die naechste Zeile"


Die Funktion Benutzereingabe_Zuruecksetzten gibt nichts zurück, macht:
	__war_eof ist falsch.
Und kann so benutzt werden:
	"setzte die Benutzereingabe zurück" oder
	"setzte die Benutzereingabe zurueck" oder
	"Setzte die Benutzereingabe zurück" oder
	"Setzte die Benutzereingabe zurueck"



Der Text __Eingabe_Puffer ist "".

Die Funktion Lies_Token_Gepuffert gibt einen Text zurück, macht:
	Wenn die Länge von __Eingabe_Puffer größer als 0 ist, dann:
		Der Text Rückgabe ist __Eingabe_Puffer.
		__Eingabe_Puffer ist "".
		Gib Rückgabe zurück.

	Wenn die Benutzereingabe nicht vorbei ist, gib die nächste Eingabe zurück.
	Gib "" zurück.
Und kann so benutzt werden:
	"der nächste Text" oder
	"den nächsten Text" oder
	"der naechste Text" oder
	"den naechsten Text"

Die Funktion Lies_Zahl_Gepuffert gibt eine Zahl zurück, macht:
	Gib den nächsten Text als Zahl zurück.
Und kann so benutzt werden:
	"die nächste Zahl" oder
	"die naechste Zahl"

Die Funktion Lies_Kommazahl_Gepuffert gibt eine Kommazahl zurück, macht:
	Gib den nächsten Text als Kommazahl zurück.
Und kann so benutzt werden:
	"die nächste Kommazahl" oder
	"die naechste Kommazahl"

Die Funktion Hat_Token gibt einen Boolean zurück, macht:
	Wenn die Länge von __Eingabe_Puffer größer als 0 ist, gib wahr zurück.
	Wenn die Benutzereingabe zu Ende gewesen ist, gib falsch zurück.
	Speichere den nächsten Text in __Eingabe_Puffer.
	Gib [wahr wenn] die Länge von __Eingabe_Puffer größer als 0 [ist] zurück.
Und kann so benutzt werden:
	"eine Eingabe vorhanden"

Die Funktion Hat_Zahl gibt einen Boolean zurück, macht:
	Gib eine Eingabe vorhanden und __Eingabe_Puffer eine Zahl [ist] zurück.
Und kann so benutzt werden:
	"die nächste Eingabe eine Zahl" oder
	"die naechste Eingabe eine Zahl"
