Binde "Duden/Texte" ein.
Binde "Duden/Zeichen" ein.

[wird von Extern_Lies_Buchstabe gesetzt falls während des Lesens EOF auftrat]
Der Wahrheitswert war_eof ist falsch.

[
	Bessere Aliase um mit war_eof zu arbeiten 
	ohne die Variable direkt zu benutzen.
]

[
	Gibt wahr zurück wenn ein EOF Zeichen gelesen wurde.
]
Die öffentliche Funktion War_EOF gibt einen Wahrheitswert zurück, macht:
	Gib war_eof zurück.
Und kann so benutzt werden:
	"die Benutzereingabe <!nicht> zu Ende gewesen ist",
	"die Benutzereingabe <!nicht> vorbei ist"

[
	Setzt die interne war_eof variable auf falsch.
]
Die öffentliche Funktion Benutzereingabe_Zuruecksetzten gibt nichts zurück, macht:
	war_eof ist falsch.
Und kann so benutzt werden:
	"setzte die Benutzereingabe zurück" oder
	"Setzte die Benutzereingabe zurück"


[
	Lies einen einzelnen Buchstaben aus der Standardeingabe
	und setzt gegebenenfalls die war_eof Variable.
]
Die Funktion extern_lies_buchstabe mit dem Parameter _war_eof vom Typ Wahrheitswert Referenz, gibt einen Buchstaben zurück,
ist in "libddpstdlib.a" definiert
und kann so benutzt werden:
	"das nächste Zeichen mit <_war_eof> aktualisiert"

[
	Besserer Alias für Extern_Lies_Buchstabe
	um nicht immer war_eof übergeben zu müssen.
]
Die Funktion lies_buchstabe_roh gibt einen Buchstaben zurück, macht:
	Gib das nächste Zeichen mit war_eof aktualisiert zurück.
Und kann so benutzt werden:
	"das nächste Zeichen aus der Standardeingabe"


[Puffer für eine einzelne Eingabe ohne Leerzeichen]
Der Text Eingabe_Puffer ist "".
[
	Puffer um beim Lesen von Eingabe_Puffer
	nichts zu verlieren
]
Der Buchstabe Gepufferter_Buchstabe ist 0 als Buchstabe.

[
	Liest eine einzelne Eingabe in Eingabe_Puffer.

	Dabei werden vorrangehende Leerzeichen ignoriert
	und ein einzelnes darrauffolgendes Leerzeichen in
	Gepufferter_Buchstabe gespeichert
]
Die öffentliche Funktion Lies_Token_in_Puffer gibt einen Text zurück, macht:
	[vorangehende Leerstellen überspringen]
	Speichere das nächste Zeichen aus der Standardeingabe in Gepufferter_Buchstabe.
	Solange Gepufferter_Buchstabe ein Leerzeichen ist oder Gepufferter_Buchstabe ein Kontrollzeichen ist, mache:
		Wenn die Benutzereingabe zu Ende gewesen ist, gib "" zurück.
		Speichere das nächste Zeichen aus der Standardeingabe in Gepufferter_Buchstabe.

	[Text bis Leerstelle Lesen]
	Der Text token ist "".
	Solange nicht (Gepufferter_Buchstabe ein Leerzeichen ist oder Gepufferter_Buchstabe ein Kontrollzeichen ist), mache:
		Speichere token verkettet mit Gepufferter_Buchstabe in token.
		Speichere das nächste Zeichen aus der Standardeingabe in Gepufferter_Buchstabe.

	Gib token zurück.
Und kann so benutzt werden:
	"die nächste Eingabe" oder
	"die naechste Eingabe"


[
	Funktionen um Eingabe aus dem Puffer bzw. direkt
	in verschiedenen Formaten zu lesen.
]

[
	Wenn Eingabe_Puffer eine Eingabe enthält
	wird diese zurückgegeben und Eingabe_Puffer geleert.
	Ansonsten wird die nächste Eingabe direkt zurückgegeben.
]
Die öffentliche Funktion Lies_Token_Gepuffert gibt einen Text zurück, macht:
	Wenn die Länge von Eingabe_Puffer größer als 0 ist, dann:
		Der Text Rückgabe ist Eingabe_Puffer.
		Eingabe_Puffer ist "".
		Gib Rückgabe zurück.

	Wenn die Benutzereingabe nicht vorbei ist, gib die nächste Eingabe zurück.
	Gib "" zurück.
Und kann so benutzt werden:
	"der nächste Text" oder
	"den nächsten Text" oder
	"der naechste Text" oder
	"den naechsten Text"

[
	Lies_Token_Gepuffert als Zahl.

	Vorher sollte Hat_Zahl überprüft werden.
]
Die öffentliche Funktion Lies_Zahl_Gepuffert gibt eine Zahl zurück, macht:
	Gib den nächsten Text als Zahl zurück.
Und kann so benutzt werden:
	"die nächste Zahl" oder
	"die naechste Zahl"

[
	Lies_Token_Gepuffert als Kommazahl.

	Vorher sollte Hat_Zahl überprüft werden.
]
Die öffentliche Funktion Lies_Kommazahl_Gepuffert gibt eine Kommazahl zurück, macht:
	Gib den nächsten Text als Kommazahl zurück.
Und kann so benutzt werden:
	"die nächste Kommazahl" oder
	"die naechste Kommazahl"

[
	Wenn Eingabe_Puffer eine Eingabe enthält wird
	der erste Buchstabe davon zurückgegeben und Eingabe_Puffer
	entsprechend angepasst.

	Wenn Gepufferter_Buchstabe einen Buchstaben enthält wird dieser
	zurückgeben und Gepufferter_Buchstabe auf 0 gesetzt.

	Ansonsten wird das nächste Zeichen direkt gelesen.
]
Die öffentliche Funktion Lies_Buchstabe_Gepuffert gibt einen Buchstaben zurück, macht:
	Wenn die Länge von Eingabe_Puffer ungleich 0 ist, dann:
		Der Buchstabe Rückgabe ist Eingabe_Puffer an der Stelle 1.
		Speichere Eingabe_Puffer im Bereich von 2 bis (die Länge von Eingabe_Puffer) in Eingabe_Puffer.
		Gib Rückgabe zurück.
	
	Wenn Gepufferter_Buchstabe als Zahl ungleich 0 ist, dann:
		Der Buchstabe Rückgabe ist Gepufferter_Buchstabe.
		Speichere 0 als Buchstabe in Gepufferter_Buchstabe.
		Gib Rückgabe zurück.

	Gib das nächste Zeichen aus der Standardeingabe zurück.
Und kann so benutzt werden:
	"der nächste Buchstabe" oder
	"der naechste Buchstabe" oder
	"den nächsten Buchstaben" oder
	"den naechsten Buchstaben"

[
	Ignoriert vorrangehende Leerzeichen und gibt
	dann die ganze Zeile bis zu, aber ohne '\n' oder EOF zurück.

	'\n' bzw. EOF wird dabei nicht nicht in einen Puffer gelegt
	sondern verworfen.
]
Die öffentliche Funktion Lies_Zeile_Gepuffert gibt einen Text zurück, macht:
	Der Text zeile ist "".
	Wenn die Länge von Eingabe_Puffer ungleich 0 ist, dann:
		Füge Eingabe_Puffer an zeile an.
		Eingabe_Puffer ist "".
		Wenn Gepufferter_Buchstabe als Zahl ungleich 0 ist, Füge Gepufferter_Buchstabe an zeile an.
		Speichere das nächste Zeichen aus der Standardeingabe in Gepufferter_Buchstabe.
	Sonst:
		Solange Gepufferter_Buchstabe ungleich '\n' ist und (Gepufferter_Buchstabe ein Leerzeichen ist oder Gepufferter_Buchstabe ein Kontrollzeichen ist), mache:
			Wenn die Benutzereingabe zu Ende gewesen ist, gib "" zurück.
			Speichere das nächste Zeichen aus der Standardeingabe in Gepufferter_Buchstabe.

	Solange Gepufferter_Buchstabe ungleich '\n' ist und die Benutzereingabe nicht vorbei ist, mache:
		Speichere zeile verkettet mit Gepufferter_Buchstabe in zeile.
		Speichere das nächste Zeichen aus der Standardeingabe in Gepufferter_Buchstabe.

	Speichere 0 als Buchstabe in Gepufferter_Buchstabe.
	Gib zeile zurück.
Und kann so benutzt werden:
	"die nächste Zeile" oder
	"die naechste Zeile"

[
	Gibt an ob etwas mit einer der obigen Funktionen
	gelesen werden kann.
]
Die öffentliche Funktion Hat_Token gibt einen Wahrheitswert zurück, macht:
	Wenn die Länge von Eingabe_Puffer größer als 0 ist, gib wahr zurück.
	Wenn die Benutzereingabe zu Ende gewesen ist, gib falsch zurück.
	Speichere den nächsten Text in Eingabe_Puffer.
	Gib wahr, wenn die Länge von Eingabe_Puffer größer als 0 ist zurück.
Und kann so benutzt werden:
	"<!k>eine Eingabe vorhanden ist"

[
	Gibt an ob die nächste Eingabe (direkt oder im Puffer)
	zu einer Zahl umgewandelt werden kann.
]
Die öffentliche Funktion Hat_Zahl gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn eine Eingabe vorhanden ist und Eingabe_Puffer eine Zahl ist zurück.
Und kann so benutzt werden:
	"die nächste Eingabe <!k>eine Zahl ist" oder
	"die naechste Eingabe <!k>eine Zahl ist"

[
	Gibt an ob ein Buchstabe (direkt oder aus dem Puffer)
	gelesen werden kann.
]
Die öffentliche Funktion Hat_Buchstabe gibt einen Wahrheitswert zurück, macht:
	Gib wahr, wenn nicht war_eof oder die Länge von Eingabe_Puffer ungleich 0 ist oder Gepufferter_Buchstabe als Zahl ungleich 0 ist zurück.
Und kann so benutzt werden:
	"<!k>ein Buchstabe vorhanden ist"
